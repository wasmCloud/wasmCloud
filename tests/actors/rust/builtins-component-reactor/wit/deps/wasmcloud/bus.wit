package wasmcloud:bus;

interface lattice {
    /// Call target interface.
    /// This represents an interface, which can be selected by `set-link-name`.
    /// The set of `target-*` functions defines all "selectable" interfaces provided by the host.
    /// Implementations of `wasmcloud:bus/lattice` may extend the set of "selectable" interfaces.
    ///
    /// todo(vadossi-cosmonic): this should be removable completely once signing is removed
    record call-target-interface {
        pkg: string,
        ns: string,
        iface: string,
        fn: option<string>,
    }

    /// Actor identifier
    variant actor-identifier {
        /// Actor public key
        public-key(string),
        /// Actor call alias
        alias(string),
    }

    /// Interface Target for wRPC invocations
    record wrpc-interface-target {
        /// wRPC component routing identifier
        id: string,
        /// wRPC component interface
        iface: call-target-interface,
        /// Link name used to resolve the target
        link-name: string,
    }

    /// Target entity
    variant target-entity {
        /// Link target paired with an optional link name
        link(option<string>),
        /// Actor target
        actor(actor-identifier),
        /// wRPC-compliant interface target
        wrpc(wrpc-interface-target),
    }

    /// Set an optional target for all interfaces specified. If `target` is `none`, then target is set to default.
    /// todo(vadossi-cosmonic): the list of interfaces should not be necessary once signing is removed
    /// see: https://github.com/wasmCloud/wasmCloud/issues/1219
    set-link-name: func(name: string, interfaces: list<call-target-interface>);

    /// Set an optional target for all interfaces specified. If `target` is `none`, then target is set to default.
    get-link-name: func() -> string;
}

/// An interface for getting configuration data for a wasm module
interface guest-config {
    /// Errors that can be returned from config sources
    variant config-error {
        /// An error occurred on the config source when fetching data
        upstream(string),
        /// I/O or connection failure
        io(string),
    }

    /// Gets a single opaque config value set at the given key if it exists
    get: func(key: string) -> result<option<list<u8>>, config-error>;

    /// Gets a list of all set config data
    get-all: func() -> result<list<tuple<string, list<u8>>>, config-error>;
}
