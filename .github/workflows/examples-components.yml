name: example-components

on:
  push:
    branches:
      - main
    tags:
      - component-blobby-v[0-9]+.[0-9]+.[0-9]+*
      - component-dog-fetcher-v[0-9]+.[0-9]+.[0-9]+*
      - component-echo-messaging-v[0-9]+.[0-9]+.[0-9]+*
      - component-http-blobstore-v[0-9]+.[0-9]+.[0-9]+*
      - component-http-hello-world-v[0-9]+.[0-9]+.[0-9]+*
      - component-http-jsonify-v[0-9]+.[0-9]+.[0-9]+*
      - component-http-keyvalue-counter-v[0-9]+.[0-9]+.[0-9]+*
      - component-keyvalue-messaging-v[0-9]+.[0-9]+.[0-9]+*
      - component-sqldb-postgres-query-v[0-9]+.[0-9]+.[0-9]+*
  pull_request:
    branches: [main]
    paths:
      - .github/workflows/examples.yml
      - crates/wash-lib/**
      - crates/wash-cli/**
      - examples/rust/components/**
      - examples/golang/components/**
      - examples/python/components/**
      - examples/typescript/components/**

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  build-wash-cli:
    name: Build wash CLI
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        wash-version:
          - 0.28.1
          - current
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
        if: ${{ matrix.wash-version == 'current' }}
      - uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84
        with:
          shared-key: "ubuntu-22.04-shared-cache"
      - name: install wash (previous version)
        if: ${{ matrix.wash-version != 'current' }}
        uses: taiki-e/install-action@37461a1de4134bec919a737ee9ba018e72011b7c
        with:
          tool: wash-cli@${{ matrix.wash-version }}
      - name: build wash (current)
        if: ${{ matrix.wash-version == 'current' }}
        run: cargo build -p wash-cli --release
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b
        if: ${{ matrix.wash-version == 'current' }}
        with:
          name: wash-${{ matrix.wash-version }}
          path: ./target/release/wash
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b
        if: ${{ matrix.wash-version != 'current' }}
        with:
          name: wash-${{ matrix.wash-version }}
          path: ~/.cargo/bin/wash

  # Ensure that `wash build` works for all example projects below
  wash-build:
    name: build
    runs-on: ubuntu-22.04
    needs: [build-wash-cli]
    strategy:
      fail-fast: false
      matrix:
        wash-version:
          - 0.28.1
          - current
        project:
          # Golang example components
          - lang: "golang"
            lang_version: "1.20"
            name: "http-echo-tinygo"
          - lang: "golang"
            lang_version: "1.20"
            name: "http-hello-world"
          # Rust example components
          - name: "blobby"
            lang: "rust"
            wasm-bin: "blobby_s.wasm"
          - name: "dog-fetcher"
            lang: "rust"
            wasm-bin: "dog_fetcher_s.wasm"
          - name: "echo-messaging"
            lang: "rust"
            wasm-bin: "echo_messaging_s.wasm"
          - name: "http-blobstore"
            lang: "rust"
            wasm-bin: "http_blobstore_s.wasm"
          - name: "http-hello-world"
            lang: "rust"
            wasm-bin: "http_hello_world_s.wasm"
          - name: "http-jsonify"
            lang: "rust"
            wasm-bin: "http_jsonify_s.wasm"
          - name: "http-keyvalue-counter"
            lang: "rust"
            wasm-bin: "http_keyvalue_counter_s.wasm"
          - name: "keyvalue-messaging"
            lang: "rust"
            wasm-bin: "keyvalue_messaging_s.wasm"
          - name: "sqldb-postgres-query"
            lang: "rust"
            wasm-bin: "sqldb_postgres_query_s.wasm"
          # Python example components
          - name: "http-hello-world"
            lang: "python"
            lang_version: "3.10"
          # Typescript example components
          - name: "http-hello-world"
            lang: "typescript"
            lang_version: "20.x"
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      # Download wash binary & install to path
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: wash-${{ matrix.wash-version }}
          path: artifacts
      - name: install wash binary to PATH # Some build tools expect wash to be on the PATH
        shell: bash
        run: |
          chmod +x ./artifacts/wash;
          echo "$(realpath ./artifacts)" >> "$GITHUB_PATH";
      # Language specific setup
      - uses: actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32
        if: ${{ matrix.project.lang == 'golang' }}
        with:
          go-version: ${{ matrix.project.lang_version }}
      - uses: acifani/setup-tinygo@b2ba42b249c7d3efdfe94166ec0f48b3191404f7
        if: ${{ matrix.project.lang == 'golang' }}
        with:
          tinygo-version: "0.30.0"
          install-binaryen: "false"
      - uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f
        if: ${{ matrix.project.lang == 'python' }}
        with:
          python-version: ${{ matrix.project.lang_version }}
      - name: install python reqs
        if: ${{ matrix.project.lang == 'python' }}
        run: |
          pip install componentize-py
      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b
        if: ${{ matrix.project.lang == 'typescript' }}
        with:
          node-version: ${{ matrix.project.lang_version }}
      - name: install node reqs
        if: ${{ matrix.project.lang == 'typescript' }}
        run: |
          npm install -g @bytecodealliance/jco
          npm install -g @bytecodealliance/componentize-js
      # Build example project(s)
      - name: build project
        run: wash build
        working-directory: examples/${{ matrix.project.lang }}/components/${{ matrix.project.name }}
      # Save example as an artifact for later step(s)
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b
        if: ${{ startswith(github.ref, format('refs/tags/component-{0}-v', matrix.project.name)) }}
        with:
          name: wash-build-${{ matrix.wash-version }}-${{ matrix.project.lang }}-component-${{ matrix.project.name }}
          path: examples/${{ matrix.project.lang }}/components/${{ matrix.project.name }}/build/${{ matrix.project.wasm-bin }}

  # Publish components relevant components if they've been tagged
  publish:
    name: publish
    runs-on: ubuntu-22.04
    needs: [wash-build]
    if: ${{ startswith(github.ref, 'refs/tags/component-') }}
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        wash-version:
          - 0.28.1
        project:
          # Rust example components (to publish)
          - name: "blobby"
            lang: "rust"
            wasm-bin: "blobby_s.wasm"
          - name: "dog-fetcher"
            lang: "rust"
            wasm-bin: "dog_fetcher_s.wasm"
          - name: "echo-messaging"
            lang: "rust"
            wasm-bin: "echo_messaging_s.wasm"
          - name: "http-blobstore"
            lang: "rust"
            wasm-bin: "http_blobstore_s.wasm"
          - name: "http-hello-world"
            lang: "rust"
            wasm-bin: "http_hello_world_s.wasm"
          - name: "http-jsonify"
            lang: "rust"
            wasm-bin: "http_jsonify_s.wasm"
          - name: "http-keyvalue-counter"
            lang: "rust"
            wasm-bin: "http_keyvalue_counter_s.wasm"
          - name: "keyvalue-messaging"
            lang: "rust"
            wasm-bin: "keyvalue_messaging_s.wasm"
          - name: "sqldb-postgres-query"
            lang: "rust"
            wasm-bin: "sqldb_postgres_query_s.wasm"
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332
      # Determine tag version (if this is a release tag), without the 'v'
      - name: Determine version
        id: meta
        shell: bash
        env:
          REF: ${{ github.ref }}
          REF_PREFIX: ${{ format('refs/tags/component-{0}-v', matrix.project.name) }}
        run: |
          export VERSION=${REF#$REF_PREFIX};
          echo -e "version=${VERSION}" >> $GITHUB_OUTPUT;
          echo "bin-name=wash-build-${{ matrix.wash-version }}-${{ matrix.project.lang }}-component-${{ matrix.project.name }}/${{ matrix.project.wasm-bin }}" >> $GITHUB_OUTPUT;
          echo "ref-prefix=$REF_PREFIX" >> $GITHUB_OUTPUT;
          echo "wasmcloud-toml-path=examples/${{ matrix.project.lang }}/components/${{ matrix.project.name }}/wasmcloud.toml" >> $GITHUB_OUTPUT;
      # Download all artifacts (wash binary and example component binaries) to work dir
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          path: artifacts
      - name: install wash binary to PATH # Some build tools expect wash to be on the PATH
        shell: bash
        run: |
          chmod +x ./artifacts/wash-${{ matrix.wash-version }}/wash;
          echo "$(realpath ./artifacts/wash-${{ matrix.wash-version }})" >> "$GITHUB_PATH";
      # Push the project to GitHub Container Registry under various tags, if this is a release tag
      - name: Push SHA-tagged WebAssembly binary to GHCR
        if: ${{ startsWith(github.ref, steps.meta.outputs.ref-prefix) }}
        env:
          WASH_REG_USER: ${{ github.repository_owner }}
          WASH_REG_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          wash push ghcr.io/${{ github.repository_owner }}/components/${{ matrix.project.name }}-${{ matrix.project.lang }}:${{ github.sha }} artifacts/${{ steps.meta.outputs.bin-name }}
      - name: Push version-tagged WebAssembly binary to GHCR
        if: ${{ startsWith(github.ref, steps.meta.outputs.ref-prefix) }}
        env:
          WASH_REG_USER: ${{ github.repository_owner }}
          WASH_REG_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          wash push ghcr.io/${{ github.repository_owner }}/components/${{ matrix.project.name }}-${{ matrix.project.lang }}:${{ steps.meta.outputs.version }} artifacts/${{ steps.meta.outputs.bin-name }}
      # (wasmCloud/wasmCloud repository only)
      # Push the project to Azure Container Registry under various tags, if this is a release tag
      - name: Push SHA-tagged WebAssembly binary to AzureCR
        if: ${{ startsWith(github.ref, steps.meta.outputs.ref-prefix) && github.repository_owner == 'wasmCloud' }}
        run: |
          wash push wasmcloud.azurecr.io/${{ github.repository_owner }}/components/${{ matrix.project.name }}-${{ matrix.project.lang }}:${{ github.sha }} artifacts/${{ steps.meta.outputs.bin-name }}
        env:
          WASH_REG_USER: ${{ secrets.AZURECR_PUSH_USER }}
          WASH_REG_PASSWORD: ${{ secrets.AZURECR_PUSH_PASSWORD }}
      - name: Push version-tagged WebAssembly binary to AzureCR
        if: ${{ startsWith(github.ref, steps.meta.outputs.ref-prefix) && github.repository_owner == 'wasmCloud' }}
        run: |
          wash push wasmcloud.azurecr.io/${{ github.repository_owner }}/components/${{ matrix.project.name }}-${{ matrix.project.lang }}:${{ steps.meta.outputs.version }} artifacts/${{ steps.meta.outputs.bin-name }}
        env:
          WASH_REG_USER: ${{ secrets.AZURECR_PUSH_USER }}
          WASH_REG_PASSWORD: ${{ secrets.AZURECR_PUSH_PASSWORD }}
