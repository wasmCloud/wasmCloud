name: wasmCloud

on:
  pull_request:
  merge_group:
  push:
    branches:
    - main
    tags:
    - 'provider-archive-v[0-9].[0-9]+.[0-9]+'
    - 'provider-archive-v[0-9].[0-9]+.[0-9]+-rc\.?[0-9]+'
    - 'provider-archive-v[0-9].[0-9]+.[0-9]+-alpha\.?[0-9]+'
    - 'v[0-9].[0-9]+.[0-9]+'
    - 'v[0-9].[0-9]+.[0-9]+-rc\.?[0-9]+'
    - 'v[0-9].[0-9]+.[0-9]+-alpha\.?[0-9]+'
    - 'wascap-v[0-9].[0-9]+.[0-9]+'
    - 'wascap-v[0-9].[0-9]+.[0-9]+-rc\.?[0-9]+'
    - 'wascap-v[0-9].[0-9]+.[0-9]+-alpha\.?[0-9]+'
    - 'wash-cli-v[0-9].[0-9]+.[0-9]+'
    - 'wash-cli-v[0-9].[0-9]+.[0-9]+-rc\.?[0-9]+'
    - 'wash-cli-v[0-9].[0-9]+.[0-9]+-alpha\.?[0-9]+'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-bin:
    strategy:
      matrix:
        config:
        - target: aarch64-unknown-linux-musl
          test-bin: |
            nix profile install --inputs-from . 'nixpkgs#qemu'
            qemu-aarch64 ./result/bin/wash --version
            qemu-aarch64 ./result/bin/wasmcloud --version
          test-oci: docker load < ./result
          # TODO: Run aarch64 binary within OCI

        - target: aarch64-apple-darwin
          test-bin: |
            file ./result/bin/wash
            file ./result/bin/wasmcloud
          test-oci: docker load < ./result

        - target: aarch64-linux-android
          test-bin: |
            file ./result/bin/wash
            file ./result/bin/wasmcloud
          test-oci: docker load < ./result

        - target: x86_64-apple-darwin
          test-bin: |
            file ./result/bin/wash
            file ./result/bin/wasmcloud
          test-oci: docker load < ./result

        # TODO: Build for GNU once https://github.com/rust-lang/rust/issues/92212 is resolved
        #- target: x86_64-pc-windows-gnu
        #  test-bin: |
        #    nix profile install --inputs-from . 'nixpkgs#wine64'
        #    wine64 ./result/bin/wash.exe --version
        #    wine64 ./result/bin/wasmcloud.exe --version
        #  test-oci: docker load < ./result
        #  # TODO: Run win64 binary within OCI

        - target: x86_64-unknown-linux-musl
          test-bin: |
            ./result/bin/wash --version
            ./result/bin/wasmcloud --version
          test-oci: |
            docker load < ./result
            docker run --rm wasmcloud:$(nix eval --raw .#wasmcloud-x86_64-unknown-linux-musl-oci.imageTag) wash --version
            docker run --rm wasmcloud:$(nix eval --raw .#wasmcloud-x86_64-unknown-linux-musl-oci.imageTag) wasmcloud --version

    name: wasmcloud-${{ matrix.config.target }}
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4.1.1
    - uses: ./.github/actions/install-nix
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - uses: ./.github/actions/build-nix
      with:
        package: wasmcloud-${{ matrix.config.target }}
    - run: ${{ matrix.config.test-bin }}
    - uses: ./.github/actions/build-nix
      with:
        package: wasmcloud-${{ matrix.config.target }}-oci
    - run: ${{ matrix.config.test-oci }}

  build-windows:
    name: wasmcloud-x86_64-pc-windows-msvc
    runs-on: windows-latest-8-cores
    steps: 
    - uses: actions/checkout@v4.1.1
    - run: cargo build --release -p wash-cli -p wasmcloud
    - run: mkdir "artifact/bin"
    - run: move "target/release/wasmcloud.exe" "artifact/bin/wasmcloud.exe"
    - run: move "target/release/wash.exe" "artifact/bin/wash.exe"
    - uses: actions/upload-artifact@v3
      with:
        name: wasmcloud-x86_64-pc-windows-msvc
        path: artifact

  build-lipo:
    name: wasmcloud-universal-darwin
    needs: build-bin
    runs-on: macos-12
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-aarch64-apple-darwin
        path: aarch64
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-apple-darwin
        path: x86_64
    - run: chmod +x ./x86_64/bin/wash
    - run: chmod +x ./x86_64/bin/wasmcloud
    - run: ./x86_64/bin/wash --version
    - run: ./x86_64/bin/wasmcloud --version
    - run: mkdir -p ./bin
    - run: lipo -create ./aarch64/bin/wash ./x86_64/bin/wash -output ./bin/wash-universal-darwin
    - run: lipo -create ./aarch64/bin/wasmcloud ./x86_64/bin/wasmcloud -output ./bin/wasmcloud-universal-darwin
    - run: chmod +x ./bin/wash-universal-darwin
    - run: chmod +x ./bin/wasmcloud-universal-darwin
    - run: ./bin/wash-universal-darwin --version
    - run: ./bin/wasmcloud-universal-darwin --version
    - uses: actions/upload-artifact@v3
      with:
        name: wasmcloud-universal-darwin
        path: bin

  test-linux:
    runs-on: ubuntu-22.04
    needs: build-bin
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-unknown-linux-musl
    - run: chmod +x ./bin/wash
    - run: chmod +x ./bin/wasmcloud
    - run: ./bin/wash --version
    - run: ./bin/wasmcloud --version

  test-windows:
    runs-on: windows-2022
    needs: build-windows
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-pc-windows-msvc
    - run: .\bin\wash.exe --version
    - run: .\bin\wasmcloud.exe --version

  cargo:
    strategy:
      matrix:
        check:
        - audit
        - fmt
        - clippy
        - nextest

    name: cargo ${{ matrix.check }}
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4.1.1
    - uses: ./.github/actions/install-nix
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build -L .#checks.x86_64-linux.${{ matrix.check }}

  build-doc:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4.1.1
    - uses: ./.github/actions/install-nix
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build -L .#checks.x86_64-linux.doc
    - run: tar xf ./result/target.tar.zst
    - run: rm -f target/doc/.lock
    - name: Create `.nojekyll`
      run: touch target/doc/.nojekyll
    - name: Write `index.html`
      run: |
        cat <<EOF > target/doc/index.html
          <!DOCTYPE html>
          <meta charset="utf-8">
          <title>Redirecting to wasmcloud_host/index.html</title>
          <meta http-equiv="refresh" content="0; URL=wasmcloud_host/index.html">
          <link rel="canonical" href="https://${{ github.repository_owner }}.github.io/wasmCloud/wasmcloud_host/index.html">
        EOF
    - uses: actions/upload-pages-artifact@v2.0.0
      with:
        path: target/doc

  deploy-doc:
    runs-on: ubuntu-22.04
    needs: build-doc
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/deploy-pages@v2.0.4
      id: deployment

  oci:
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    needs:
    - build-bin
    - test-linux
    if: ${{ github.event_name != 'pull_request' && github.event_name != 'merge_group' }}
    env:
      # Annotations cause issues with the image metadata
      # as displayed on GitHub packages page for the repo ('unknown/unknown')
      #
      # See: https://github.com/orgs/community/discussions/45969
      BUILDX_NO_DEFAULT_ATTESTATIONS: 1
    steps:
    - uses: actions/checkout@v4.1.1
    - uses: ./.github/actions/install-nix
      if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Set up QEMU
      if: startsWith(github.ref, 'refs/tags/wash-cli-v') || github.ref == 'refs/heads/main'
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      if: startsWith(github.ref, 'refs/tags/wash-cli-v') || github.ref == 'refs/heads/main'
      uses: docker/setup-buildx-action@v3

    - name: Extract tag context
      if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
      id: ctx
      run: |
        echo 'package=${GITHUB_REPOSITORY,,}' >> $GITHUB_OUTPUT
        echo 'sha_short=$(git rev-parse --short HEAD)' >> $GITHUB_OUTPUT
        echo 'version=${GITHUB_REF_NAME#v}' >> $GITHUB_OUTPUT

    - name: Login to AzureCR
      if: startswith(github.ref, 'refs/tags/v') || startswith(github.ref, 'refs/tags/wash-cli-v')
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURECR_PUSH_URL }}
        username: ${{ secrets.AZURECR_PUSH_USER }}
        password: ${{ secrets.AZURECR_PUSH_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to DockerHub
      if: startswith(github.ref, 'refs/tags/v') || startswith(github.ref, 'refs/tags/wash-cli-v')
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_PUSH_USER }}
        password: ${{ secrets.DOCKERHUB_PUSH_PASSWORD }}

    - if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
      run: |
        nix run -L .#build-wasmcloud-oci-debian wasmcloud
        nix profile install --inputs-from . 'nixpkgs#buildah'

    - name: Push wasmCloud commit rev
      if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
      run: |
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://ghcr.io/${{ steps.ctx.outputs.package }}:${{ github.sha }}
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://ghcr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.sha_short }}

        docker run ghcr.io/${{ steps.ctx.outputs.package }}:${{ github.sha }} wasmcloud --version
        docker run ghcr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.sha_short }} wasmcloud --version

    - name: Push wasmCloud tag
      if: startswith(github.ref, 'refs/tags/v')
      run: |
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }}
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://ghcr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }}
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://wasmcloud.azurecr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }}

        docker run ${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }} wasmcloud --version
        docker run ghcr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }} wasmcloud --version
        docker run wasmcloud.azurecr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }} wasmcloud --version

    - name: Push latest wasmCloud tag
      if: startswith(github.ref, 'refs/tags/v') && !contains(github.ref, 'rc')
      run: |
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://${{ steps.ctx.outputs.package }}:latest
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://ghcr.io/${{ steps.ctx.outputs.package }}:latest
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://wasmcloud.azurecr.io/${{ steps.ctx.outputs.package }}:latest

        docker run ${{ steps.ctx.outputs.package }}:latest wasmcloud --version
        docker run ghcr.io/${{ steps.ctx.outputs.package }}:latest wasmcloud --version
        docker run wasmcloud.azurecr.io/${{ steps.ctx.outputs.package }}:latest wasmcloud --version

    - name: Extract wash tag context
      if: startsWith(github.ref, 'refs/tags/wash-cli-v')
      shell: bash
      run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

    - name: Extract wash build context
      if: github.ref == 'refs/heads/main'
      shell: bash
      run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV

    - name: Output wash Version
      id: wash-ctx
      run: echo "version=$RELEASE_VERSION" >> $GITHUB_OUTPUT

    # Extract docker metadata
    - name: Configure `wash` Docker metadata
      if: startsWith(github.ref, 'refs/tags/wash-cli-v') || github.ref == 'refs/heads/main'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          wasmcloud/wash
          wasmcloud.azurecr.io/wash
          ghcr.io/wasmcloud/wash
        tags: |
          type=semver,pattern={{version}}
          type=sha
        flavor: |
          latest=auto
        labels: |
          org.opencontainers.image.title=wash
          org.opencontainers.image.description=WAsmcloud SHell
          org.opencontainers.image.vendor=wasmCloud
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.wash-ctx.outputs.version }}

    # Build the docker image
    - name: Build and push `wash` Docker image
      if: startsWith(github.ref, 'refs/tags/wash-cli-v') || github.ref == 'refs/heads/main'
      id: wash_docker_build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: "./crates/wash-cli/Dockerfile"
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.repository == 'wasmCloud/wasmCloud' }}
        tags: ${{ steps.meta.outputs.tags }}

    # Display image digest
    - name: Image digest
      if: startsWith(github.ref, 'refs/tags/wash-cli-v') || github.ref == 'refs/heads/main'
      run: echo ${{ steps.wash_docker_build.outputs.digest }}

  release:
    if: (startsWith(github.ref, 'refs/tags/v') || startsWith(github.ref, 'refs/tags/wash-v')) && github.event_name == 'push'
    needs:
    - build-bin
    - build-doc
    - build-lipo
    - cargo
    - oci
    - test-linux
    - test-windows
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4.1.1
    - uses: actions/download-artifact@v3
      with:
        path: artifacts
    - run: |
        for dir in ./artifacts/wasmcloud-*; do
          target=${dir#./artifacts/wasmcloud-}
          for bin in ${dir}/wasmcloud-${target}/bin/*; do
            chmod +x ${bin}
            case "$bin" in
              *.exe)
                name="${bin#.exe}"
                mkdir -p ${name}
                do mv ${bin} ./${name}/${bin#.exe}-${target}.exe
              ;;
              *)
                mkdir -p ${bin}
                do mv ${bin} ./${bin}/${bin}-${target}
              ;;
            esac
          done
        done

    - uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        draft: true
        prerelease: true
        generate_release_notes: true
        files: wasmcloud/*

    - uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/wash-cli-v')
      with:
        draft: true
        prerelease: true
        generate_release_notes: true
        files: wash/*

  snapcraft:
    if: startsWith(github.ref, 'refs/tags/wash-cli-v') && github.event_name == 'push'
    needs: cargo
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4.1.1
      
    - uses: snapcore/action-build@v1
      id: build
      with:
        path: ./crates/wash-cli
    - uses: snapcore/action-publish@v1
      env:
        SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAP_STORE_LOGIN }}
      with:
        snap: ${{ steps.build.outputs.snap }}
        release: edge

  nfpm:
    if: startsWith(github.ref, 'refs/tags/wash-cli-v') && github.event_name == 'push'
    needs:
    - cargo
    - build-bin
    - test-linux
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4.1.1
      
    - uses: ./.github/actions/install-nix
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Install NFPM
      run: nix profile install -L --inputs-from . 'nixpkgs#nfpm'

    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-aarch64-unknown-linux-musl
        path: ./crates/wash-cli/aarch64
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-unknown-linux-musl
        path: ./crates/wash-cli/x86_64

    - name: Build `deb` and `rpm`
      working-directory: ./crates/wash-cli
      run: |
        export VERSION=$(echo $REF | cut -d/ -f3)
        nfpm pkg --packager deb -f build/nfpm.amd64.yaml
        nfpm pkg --packager deb -f build/nfpm.arm64.yaml
        nfpm pkg --packager rpm -f build/nfpm.amd64.yaml
        nfpm pkg --packager rpm -f build/nfpm.arm64.yaml
    - name: Push `deb`
      working-directory: ./crates/wash-cli
      run: |
        debs=(35 203 206 207 210 215 219 220 221 233 235 237 261 266)
        for distro_version in "${debs[@]}"; do
          curl -F "package[distro_version_id]=${distro_version}" -F "package[package_file]=@$(ls wash_*_amd64.deb)" https://$PACKAGECLOUD_TOKEN:@packagecloud.io/api/v1/repos/wasmcloud/core/packages.json;
          curl -F "package[distro_version_id]=${distro_version}" -F "package[package_file]=@$(ls wash_*_arm64.deb)" https://$PACKAGECLOUD_TOKEN:@packagecloud.io/api/v1/repos/wasmcloud/core/packages.json;
        done
    - name: Push `rpm`
      working-directory: ./crates/wash-cli
      run: |
        rpms=(194 204 209 216 226 231 236 239 240 244 260 273)
        for distro_version in "${rpms[@]}"; do 
          curl -F "package[distro_version_id]=${distro_version}" -F "package[package_file]=@$(ls wash-*.aarch64.rpm)" https://$PACKAGECLOUD_TOKEN:@packagecloud.io/api/v1/repos/wasmcloud/core/packages.json;
          curl -F "package[distro_version_id]=${distro_version}" -F "package[package_file]=@$(ls wash-*.x86_64.rpm)" https://$PACKAGECLOUD_TOKEN:@packagecloud.io/api/v1/repos/wasmcloud/core/packages.json;
        done

  crates:
    strategy:
      matrix:
        crate:
        - provider-archive
        - wascap
        - wash-cli
        - wash-lib

    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    needs: cargo
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4.1.1
      if: startsWith(github.ref, format('refs/tags/{0}-v', matrix.crate))
      
    - name: publish ${{ matrix.crate }} to crates.io
      run: cargo publish --token ${{ secrets.CRATES_PUBLISH_TOKEN }}
      working-directory: ./crates/${{ matrix.crate }}
      if: startsWith(github.ref, format('refs/tags/{0}-v', matrix.crate))
