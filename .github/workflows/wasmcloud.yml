name: wasmCloud

on:
  pull_request:
  push:
    branches:
    - main
    tags:
    - 'v[0-9].[0-9]+.[0-9]+'
    - 'v[0-9].[0-9]+.[0-9]+-rc[0-9]+'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-bin:
    strategy:
      matrix:
        config:
        - target: aarch64-unknown-linux-musl
          install-path: /bin/wasmcloud
          test-bin: nix shell --inputs-from . 'nixpkgs#qemu' -c qemu-aarch64 ./result/bin/wasmcloud --version
          test-oci: docker load < ./result
          # TODO: Run aarch64 binary within OCI

        - target: aarch64-apple-darwin
          install-path: /bin/wasmcloud
          test-bin: file ./result/bin/wasmcloud
          test-oci: docker load < ./result

        - target: aarch64-linux-android
          install-path: /bin/wasmcloud
          test-bin: file ./result/bin/wasmcloud
          test-oci: docker load < ./result

        - target: x86_64-apple-darwin
          install-path: /bin/wasmcloud
          test-bin: file ./result/bin/wasmcloud
          test-oci: docker load < ./result

        - target: x86_64-pc-windows-gnu
          install-path: /bin/wasmcloud.exe
          test-bin: nix shell --inputs-from . 'nixpkgs#wine64' -c wine64 ./result/bin/wasmcloud.exe --version
          test-oci: docker load < ./result
          # TODO: Run win64 binary within OCI

        - target: x86_64-unknown-linux-musl
          install-path: /bin/wasmcloud
          test-bin: ./result/bin/wasmcloud --version
          test-oci: |
            docker load < ./result
            docker run --rm wasmcloud:$(nix eval --raw .#wasmcloud-x86_64-unknown-linux-musl-oci.imageTag) wasmcloud --version

    name: wasmcloud-${{ matrix.config.target }}
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/install-nix
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - uses: ./.github/actions/build-nix
      with:
        package: wasmcloud-${{ matrix.config.target }}
        install-path: ${{ matrix.config.install-path }}
    - run: ${{ matrix.config.test-bin }}
    - uses: ./.github/actions/build-nix
      with:
        package: wasmcloud-${{ matrix.config.target }}-oci
    - run: ${{ matrix.config.test-oci }}

  build-lipo:
    name: wasmcloud-universal-darwin
    needs: build-bin
    runs-on: macos-12
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-aarch64-apple-darwin
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-apple-darwin
    - run: chmod +x ./wasmcloud-x86_64-apple-darwin
    - run: ./wasmcloud-x86_64-apple-darwin --version
    - run: lipo -create ./wasmcloud-aarch64-apple-darwin ./wasmcloud-x86_64-apple-darwin -output ./wasmcloud-universal-darwin
    - run: chmod +x ./wasmcloud-universal-darwin
    - run: ./wasmcloud-universal-darwin --version
    - uses: actions/upload-artifact@v3
      with:
        name: wasmcloud-universal-darwin
        path: wasmcloud-universal-darwin

  test-linux:
    runs-on: ubuntu-22.04
    needs: build-bin
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-unknown-linux-musl
    - run: chmod +x ./wasmcloud-x86_64-unknown-linux-musl
    - run: ./wasmcloud-x86_64-unknown-linux-musl --version

  test-windows:
    runs-on: windows-2022
    needs: build-bin
    steps:
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-pc-windows-gnu
    - run: .\wasmcloud-x86_64-pc-windows-gnu --version

  cargo:
    strategy:
      matrix:
        check:
        - audit
        - fmt
        - clippy
        - nextest

    name: cargo ${{ matrix.check }}
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/install-nix
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build -L .#checks.x86_64-linux.${{ matrix.check }}

  build-doc:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/install-nix
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: nix build -L .#checks.x86_64-linux.doc
    - run: tar xf ./result/target.tar.zst
    - run: rm -f target/doc/.lock
    - name: Create `.nojekyll`
      run: touch target/doc/.nojekyll
    - name: Write `index.html`
      run: |
        cat <<EOF > target/doc/index.html
          <!DOCTYPE html>
          <meta charset="utf-8">
          <title>Redirecting to wasmcloud_host/index.html</title>
          <meta http-equiv="refresh" content="0; URL=wasmcloud_host/index.html">
          <link rel="canonical" href="https://${{ github.repository_owner }}.github.io/wasmCloud/wasmcloud_host/index.html">
        EOF
    - uses: actions/upload-pages-artifact@v2.0.0
      with:
        path: target/doc

  deploy-doc:
    runs-on: ubuntu-22.04
    needs: build-doc
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
    - uses: actions/deploy-pages@v2.0.4
      id: deployment

  oci:
    runs-on: ubuntu-22.04
    permissions:
      packages: write
    needs: build-bin
    if: ${{ github.event_name != 'pull_request' }}
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/install-nix
      with: 
        cachixAuthToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - name: Extract tag context
      id: ctx
      run: |
        echo 'package=${GITHUB_REPOSITORY,,}' >> $GITHUB_OUTPUT
        echo 'sha_short=$(git rev-parse --short HEAD)' >> $GITHUB_OUTPUT
        echo 'version=${GITHUB_REF_NAME#v}' >> $GITHUB_OUTPUT

    - name: Login to AzureCR
      if: startswith(github.ref, 'refs/tags/')
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURECR_PUSH_URL }}
        username: ${{ secrets.AZURECR_PUSH_USER }}
        password: ${{ secrets.AZURECR_PUSH_PASSWORD }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Login to DockerHub
      if: startswith(github.ref, 'refs/tags/')
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_PUSH_USER }}
        password: ${{ secrets.DOCKERHUB_PUSH_PASSWORD }}

    - run: |
        nix run -L .#build-wasmcloud-oci-debian wasmcloud
        nix profile install --inputs-from . 'nixpkgs#buildah'

    - name: Push commit rev
      run: |
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://ghcr.io/${{ steps.ctx.outputs.package }}:${{ github.sha }}
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://ghcr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.sha_short }}

        docker run ghcr.io/${{ steps.ctx.outputs.package }}:${{ github.sha }} wasmcloud --version
        docker run ghcr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.sha_short }} wasmcloud --version

    - name: Push tag
      if: startswith(github.ref, 'refs/tags/')
      run: |
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }}
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://ghcr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }}
        buildah manifest push --storage-driver=vfs --all --format 'v2s2' wasmcloud docker://wasmcloud.azurecr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }}

        docker run ${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }} wasmcloud --version
        docker run ghcr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }} wasmcloud --version
        docker run wasmcloud.azurecr.io/${{ steps.ctx.outputs.package }}:${{ steps.ctx.outputs.version }} wasmcloud --version

  # TODO: Push `latest`

  release:
    if: startsWith(github.ref, 'refs/tags/') && github.event_name == 'push'
    needs:
    - build-bin
    - build-doc
    - build-lipo
    - cargo
    - oci
    - test-linux
    - test-windows
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-aarch64-apple-darwin
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-aarch64-unknown-linux-musl
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-universal-darwin
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-apple-darwin
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-pc-windows-gnu
    - uses: actions/download-artifact@v3
      with:
        name: wasmcloud-x86_64-unknown-linux-musl

    - run: chmod +x ./wasmcloud-*

    - uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: true
        generate_release_notes: true
        files: |
          wasmcloud-aarch64-apple-darwin
          wasmcloud-aarch64-unknown-linux-musl
          wasmcloud-universal-darwin
          wasmcloud-x86_64-apple-darwin
          wasmcloud-x86_64-pc-windows-gnu
          wasmcloud-x86_64-unknown-linux-musl
