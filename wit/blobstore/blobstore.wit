// The blob store interface
// This is currently a phase 1 interface, and is subject to change

package wasmcloud:blobstore

// Shared data types for use when interacting with a blob store
interface types {
    // Metadata about a container
    record container-info {
        container-id: string,
        created-at: u64,
    }

    // Metadata about an object
    record object-info {
        container-id: string,
        object-id: string,
        content-length: u64,
        last-modified: u64,
        content-type: option<string>,
        content-encoding: option<string>,
    }

    // Metadata about a chunk
    record chunk {    
        object-id: string,
        container-id: string,
        bytes: list<u8>,
        offset: u64,
        is-last: bool,
    }
}

// Functions used by a component that wishes to use a blob store
interface consumer {
    use types.{container-info, object-info, chunk}

    // Determine if a container exists in the store
    container-exists: func(container-id: string) -> bool
    // Create a container in the store
    create-container: func(container-id: string) -> result<_, string>
    // Remove a container from the store
    remove-container: func(container-id: string) -> result<_, string>
    // Get metadata about a container
    get-container-info: func(container-id: string) -> result<option<container-info>, string>        
    // Get metadata about an object
    get-object-info: func(container-id: string, object-id: string) -> result<option<object-info>, string>
    // Removes an object from the store
    remove-object: func(container-id: string, object-id: string) -> result<bool, string>
    // Puts an object and its first (or only) chunk into the store
    put-object: func(chunk: chunk, content-type: string, content-encoding: string) -> result<string, string>
    // Puts subsequent chunks of a pre-existing object into the store
    put-chunk: func(stream-id: string, chunk: chunk, cancel: bool) -> result<_, string>
    // Stream object chunks from the store. Requests that receive-chunk be called multiple times by the provider
    stream-object: func(container-id: string, object-id: string) -> result<_, string>
}

interface handler {
    use types.{chunk}

    // Callback to handle a single chunk of an object delivered by the provider
    receive-chunk: func(chunk: chunk) -> result<bool, string>
}
