package main

import (
	"fmt"

	interfaces "github.com/wasmcloud/wasmcloud/examples/golang/components/sqldb-postgres-query/gen"
)

const CREATE_TABLE_QUERY = `
CREATE TABLE IF NOT EXISTS example (
	id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	description text NOT NULL,
	created_at timestamptz NOT NULL DEFAULT NOW()
);
`

// A basic insert query, using Postgres `RETURNING` syntax,
// which returns the contents of the row that was inserted
const INSERT_QUERY = `
INSERT INTO example (description) VALUES ($1) RETURNING *;
`

// type aliases for more readable code
type PgValue = interfaces.WasmcloudPostgres0_1_0_draft_QueryPgValue
type RowEntry = interfaces.WasmcloudPostgres0_1_0_draft_TypesResultRowEntry

type Component struct{}

func init() {
	component := Component{}
	// Set the incoming handler struct to HttpServer
	interfaces.SetExportsWasmcloudExamplesInvoke(component)
}

func (c Component) Call() string {
	query := interfaces.WasmcloudPostgres0_1_0_draft_QueryQuery(CREATE_TABLE_QUERY, make([]PgValue, 0))
	if query.IsErr() {
		return fmt.Sprintf("ERROR: failed to create table: %v", query.UnwrapErr())
	}
	val := interfaces.WasmcloudPostgres0_1_0_draft_TypesPgValueText("inserted example go row!")
	insertResult := interfaces.WasmcloudPostgres0_1_0_draft_QueryQuery(INSERT_QUERY, []PgValue{val})
	if insertResult.IsErr() {
		return fmt.Sprintf("ERROR: failed to insert row: %v", insertResult.UnwrapErr())
	}
	insertedRows := insertResult.Unwrap()
	var rowEntry []RowEntry
	if len(insertedRows) == 1 {
		rowEntry = insertedRows[0]
	} else {
		return "ERROR: failed to insert row"
	}

	for _, row := range rowEntry {
		if row.ColumnName == "description" {
			return fmt.Sprintf("SUCCESS: inserted and retrieved: %v", row.Value.GetText())
		}
	}
	return "ERROR: failed to retrieve inserted row"
}

//go:generate wit-bindgen tiny-go wit --out-dir=gen --gofmt
func main() {}
