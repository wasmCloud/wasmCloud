// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package types represents the imported interface "wasmcloud:postgres/types@0.1.1-draft".
//
// Types used by components and providers of a SQLDB Postgres interface
package types

import (
	"github.com/bytecodealliance/wasm-tools-go/cm"
)

// QueryError represents the variant "wasmcloud:postgres/types@0.1.1-draft#query-error".
//
// Errors that occur while executing queries
//
//	variant query-error {
//		invalid-params(string),
//		invalid-query(string),
//		unexpected(string),
//	}
type QueryError cm.Variant[uint8, string, string]

// QueryErrorInvalidParams returns a [QueryError] of case "invalid-params".
//
// Unknown/invalid query parameters
func QueryErrorInvalidParams(data string) QueryError {
	return cm.New[QueryError](0, data)
}

// InvalidParams returns a non-nil *[string] if [QueryError] represents the variant case "invalid-params".
func (self *QueryError) InvalidParams() *string {
	return cm.Case[string](self, 0)
}

// QueryErrorInvalidQuery returns a [QueryError] of case "invalid-query".
//
// Invalid/malformed query
func QueryErrorInvalidQuery(data string) QueryError {
	return cm.New[QueryError](1, data)
}

// InvalidQuery returns a non-nil *[string] if [QueryError] represents the variant case "invalid-query".
func (self *QueryError) InvalidQuery() *string {
	return cm.Case[string](self, 1)
}

// QueryErrorUnexpected returns a [QueryError] of case "unexpected".
//
// A completely unexpected error, specific to executing queries
func QueryErrorUnexpected(data string) QueryError {
	return cm.New[QueryError](2, data)
}

// Unexpected returns a non-nil *[string] if [QueryError] represents the variant case "unexpected".
func (self *QueryError) Unexpected() *string {
	return cm.Case[string](self, 2)
}

var stringsQueryError = [3]string{
	"invalid-params",
	"invalid-query",
	"unexpected",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v QueryError) String() string {
	return stringsQueryError[v.Tag()]
}

// StatementPrepareError represents the variant "wasmcloud:postgres/types@0.1.1-draft#statement-prepare-error".
//
// Errors that occur while preparing a statement
//
//	variant statement-prepare-error {
//		unexpected(string),
//	}
type StatementPrepareError cm.Variant[uint8, string, string]

// StatementPrepareErrorUnexpected returns a [StatementPrepareError] of case "unexpected".
//
// A completely unexpected error
func StatementPrepareErrorUnexpected(data string) StatementPrepareError {
	return cm.New[StatementPrepareError](0, data)
}

// Unexpected returns a non-nil *[string] if [StatementPrepareError] represents the variant case "unexpected".
func (self *StatementPrepareError) Unexpected() *string {
	return cm.Case[string](self, 0)
}

var stringsStatementPrepareError = [1]string{
	"unexpected",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v StatementPrepareError) String() string {
	return stringsStatementPrepareError[v.Tag()]
}

// PreparedStatementExecError represents the variant "wasmcloud:postgres/types@0.1.1-draft#prepared-statement-exec-error".
//
// Errors that occur during prepared statement execution
//
//	variant prepared-statement-exec-error {
//		unknown-prepared-query,
//		query-error(query-error),
//		unexpected(string),
//	}
type PreparedStatementExecError cm.Variant[uint8, QueryErrorShape, QueryError]

// PreparedStatementExecErrorUnknownPreparedQuery returns a [PreparedStatementExecError] of case "unknown-prepared-query".
//
// Unknown/invalid prepared statement token
func PreparedStatementExecErrorUnknownPreparedQuery() PreparedStatementExecError {
	var data struct{}
	return cm.New[PreparedStatementExecError](0, data)
}

// UnknownPreparedQuery returns true if [PreparedStatementExecError] represents the variant case "unknown-prepared-query".
func (self *PreparedStatementExecError) UnknownPreparedQuery() bool {
	return self.Tag() == 0
}

// PreparedStatementExecErrorQueryError_ returns a [PreparedStatementExecError] of case "query-error".
//
// An otherwise known query execution error
func PreparedStatementExecErrorQueryError_(data QueryError) PreparedStatementExecError {
	return cm.New[PreparedStatementExecError](1, data)
}

// QueryError_ returns a non-nil *[QueryError] if [PreparedStatementExecError] represents the variant case "query-error".
func (self *PreparedStatementExecError) QueryError_() *QueryError {
	return cm.Case[QueryError](self, 1)
}

// PreparedStatementExecErrorUnexpected returns a [PreparedStatementExecError] of case "unexpected".
//
// A completely unexpected error, specific to prepared statements
func PreparedStatementExecErrorUnexpected(data string) PreparedStatementExecError {
	return cm.New[PreparedStatementExecError](2, data)
}

// Unexpected returns a non-nil *[string] if [PreparedStatementExecError] represents the variant case "unexpected".
func (self *PreparedStatementExecError) Unexpected() *string {
	return cm.Case[string](self, 2)
}

var stringsPreparedStatementExecError = [3]string{
	"unknown-prepared-query",
	"query-error",
	"unexpected",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v PreparedStatementExecError) String() string {
	return stringsPreparedStatementExecError[v.Tag()]
}

// HashableF64 represents the tuple "wasmcloud:postgres/types@0.1.1-draft#hashable-f64".
//
// This type of floating point is necessary as rust does not allow Eq/PartialEq/Hash
// on real `f64`
// Instead we use a sign + mantissa + exponent
//
// see: https://docs.rs/num/latest/num/trait.Float.html#tymethod.integer_decode
//
//	type hashable-f64 = tuple<u64, s16, s8>
type HashableF64 cm.Tuple3[uint64, int16, int8]

// HashableF32 represents the type alias "wasmcloud:postgres/types@0.1.1-draft#hashable-f32".
//
// See [HashableF64] for more information.
type HashableF32 = HashableF64

// Point represents the tuple "wasmcloud:postgres/types@0.1.1-draft#point".
//
//	type point = tuple<hashable-f64, hashable-f64>
type Point [2]HashableF64

// LowerLeftPoint represents the type alias "wasmcloud:postgres/types@0.1.1-draft#lower-left-point".
//
// See [Point] for more information.
type LowerLeftPoint = Point

// UpperRightPoint represents the type alias "wasmcloud:postgres/types@0.1.1-draft#upper-right-point".
//
// See [Point] for more information.
type UpperRightPoint = Point

// StartPoint represents the type alias "wasmcloud:postgres/types@0.1.1-draft#start-point".
//
// See [Point] for more information.
type StartPoint = Point

// EndPoint represents the type alias "wasmcloud:postgres/types@0.1.1-draft#end-point".
//
// See [Point] for more information.
type EndPoint = Point

// CenterPoint represents the type alias "wasmcloud:postgres/types@0.1.1-draft#center-point".
//
// See [Point] for more information.
type CenterPoint = Point

// Radius represents the type alias "wasmcloud:postgres/types@0.1.1-draft#radius".
//
// See [HashableF64] for more information.
type Radius = HashableF64

// IPv4Addr represents the string "wasmcloud:postgres/types@0.1.1-draft#ipv4-addr".
//
//	type ipv4-addr = string
type IPv4Addr string

// IPv6Addr represents the string "wasmcloud:postgres/types@0.1.1-draft#ipv6-addr".
//
//	type ipv6-addr = string
type IPv6Addr string

// Subnet represents the string "wasmcloud:postgres/types@0.1.1-draft#subnet".
//
//	type subnet = string
type Subnet string

// Xmin represents the s64 "wasmcloud:postgres/types@0.1.1-draft#xmin".
//
//	type xmin = s64
type Xmin int64

// Xmax represents the s64 "wasmcloud:postgres/types@0.1.1-draft#xmax".
//
//	type xmax = s64
type Xmax int64

// XipList represents the list "wasmcloud:postgres/types@0.1.1-draft#xip-list".
//
//	type xip-list = list<s64>
type XipList cm.List[int64]

// LogfileNum represents the u32 "wasmcloud:postgres/types@0.1.1-draft#logfile-num".
//
//	type logfile-num = u32
type LogfileNum uint32

// LogfileByteOffset represents the u32 "wasmcloud:postgres/types@0.1.1-draft#logfile-byte-offset".
//
//	type logfile-byte-offset = u32
type LogfileByteOffset uint32

// ColumnName represents the string "wasmcloud:postgres/types@0.1.1-draft#column-name".
//
//	type column-name = string
type ColumnName string

// Numeric represents the string "wasmcloud:postgres/types@0.1.1-draft#numeric".
//
// Arbitrary precision numeric type
//
//	type numeric = string
type Numeric string

// LexemeWeight represents the enum "wasmcloud:postgres/types@0.1.1-draft#lexeme-weight".
//
// Chosen weight of a Lexeme
//
//	enum lexeme-weight {
//		A,
//		B,
//		C,
//		D
//	}
type LexemeWeight uint8

const (
	LexemeWeightA LexemeWeight = iota
	LexemeWeightB
	LexemeWeightC
	LexemeWeightD
)

var stringsLexemeWeight = [4]string{
	"A",
	"B",
	"C",
	"D",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e LexemeWeight) String() string {
	return stringsLexemeWeight[e]
}

// Lexeme represents the record "wasmcloud:postgres/types@0.1.1-draft#lexeme".
//
// Represents an arbitrary precision numeric type
//
//	record lexeme {
//		position: option<u16>,
//		weight: option<lexeme-weight>,
//		data: string,
//	}
type Lexeme struct {
	_ cm.HostLayout
	// Position (1->16383)
	Position cm.Option[uint16]

	// Weight of the lexeme (in a relevant ts-vector)
	Weight cm.Option[LexemeWeight]

	// Data
	Data string
}

// Offset represents the variant "wasmcloud:postgres/types@0.1.1-draft#offset".
//
// Offsets are expressed in seconds of timezone difference in either from the
// eastern hemisphere or western hemisphere.
//
// ex. "America/New York", which is UTC-4 can be expressed as western-hemisphere-secs(4
// * 3600)
//
//	variant offset {
//		eastern-hemisphere-secs(s32),
//		western-hemisphere-secs(s32),
//	}
type Offset cm.Variant[uint8, int32, int32]

// OffsetEasternHemisphereSecs returns a [Offset] of case "eastern-hemisphere-secs".
func OffsetEasternHemisphereSecs(data int32) Offset {
	return cm.New[Offset](0, data)
}

// EasternHemisphereSecs returns a non-nil *[int32] if [Offset] represents the variant case "eastern-hemisphere-secs".
func (self *Offset) EasternHemisphereSecs() *int32 {
	return cm.Case[int32](self, 0)
}

// OffsetWesternHemisphereSecs returns a [Offset] of case "western-hemisphere-secs".
func OffsetWesternHemisphereSecs(data int32) Offset {
	return cm.New[Offset](1, data)
}

// WesternHemisphereSecs returns a non-nil *[int32] if [Offset] represents the variant case "western-hemisphere-secs".
func (self *Offset) WesternHemisphereSecs() *int32 {
	return cm.Case[int32](self, 1)
}

var stringsOffset = [2]string{
	"eastern-hemisphere-secs",
	"western-hemisphere-secs",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Offset) String() string {
	return stringsOffset[v.Tag()]
}

// Date represents the variant "wasmcloud:postgres/types@0.1.1-draft#date".
//
// Dates are represented similarly to tokio-postgres implementation
// see: https://docs.rs/postgres-types/0.2.6/postgres_types/enum.Date.html#variant.Value
//
//	variant date {
//		positive-infinity,
//		negative-infinity,
//		ymd(tuple<s32, u32, u32>),
//	}
type Date cm.Variant[uint8, cm.Tuple3[int32, uint32, uint32], cm.Tuple3[int32, uint32, uint32]]

// DatePositiveInfinity returns a [Date] of case "positive-infinity".
func DatePositiveInfinity() Date {
	var data struct{}
	return cm.New[Date](0, data)
}

// PositiveInfinity returns true if [Date] represents the variant case "positive-infinity".
func (self *Date) PositiveInfinity() bool {
	return self.Tag() == 0
}

// DateNegativeInfinity returns a [Date] of case "negative-infinity".
func DateNegativeInfinity() Date {
	var data struct{}
	return cm.New[Date](1, data)
}

// NegativeInfinity returns true if [Date] represents the variant case "negative-infinity".
func (self *Date) NegativeInfinity() bool {
	return self.Tag() == 1
}

// DateYmd returns a [Date] of case "ymd".
func DateYmd(data cm.Tuple3[int32, uint32, uint32]) Date {
	return cm.New[Date](2, data)
}

// Ymd returns a non-nil *[cm.Tuple3[int32, uint32, uint32]] if [Date] represents the variant case "ymd".
func (self *Date) Ymd() *cm.Tuple3[int32, uint32, uint32] {
	return cm.Case[cm.Tuple3[int32, uint32, uint32]](self, 2)
}

var stringsDate = [3]string{
	"positive-infinity",
	"negative-infinity",
	"ymd",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Date) String() string {
	return stringsDate[v.Tag()]
}

// Interval represents the record "wasmcloud:postgres/types@0.1.1-draft#interval".
//
//	record interval {
//		start: date,
//		start-inclusive: bool,
//		end: date,
//		end-inclusive: bool,
//	}
type Interval struct {
	_              cm.HostLayout
	Start          Date
	StartInclusive bool
	End            Date
	EndInclusive   bool
}

// Time represents the record "wasmcloud:postgres/types@0.1.1-draft#time".
//
//	record time {
//		hour: u32,
//		min: u32,
//		sec: u32,
//		micro: u32,
//	}
type Time struct {
	_     cm.HostLayout
	Hour  uint32
	Min   uint32
	Sec   uint32
	Micro uint32
}

// TimeTz represents the record "wasmcloud:postgres/types@0.1.1-draft#time-tz".
//
//	record time-tz {
//		timesonze: string,
//		time: time,
//	}
type TimeTz struct {
	_         cm.HostLayout
	Timesonze string
	Time      Time
}

// Timestamp represents the record "wasmcloud:postgres/types@0.1.1-draft#timestamp".
//
//	record timestamp {
//		date: date,
//		time: time,
//	}
type Timestamp struct {
	_    cm.HostLayout
	Date Date
	Time Time
}

// TimestampTz represents the record "wasmcloud:postgres/types@0.1.1-draft#timestamp-tz".
//
//	record timestamp-tz {
//		timestamp: timestamp,
//		offset: offset,
//	}
type TimestampTz struct {
	_         cm.HostLayout
	Timestamp Timestamp
	Offset    Offset
}

// MacAddressEui48 represents the record "wasmcloud:postgres/types@0.1.1-draft#mac-address-eui48".
//
//	record mac-address-eui48 {
//		bytes: tuple<u8, u8, u8, u8, u8, u8>,
//	}
type MacAddressEui48 struct {
	_     cm.HostLayout
	Bytes [6]uint8
}

// MacAddressEui64 represents the record "wasmcloud:postgres/types@0.1.1-draft#mac-address-eui64".
//
//	record mac-address-eui64 {
//		bytes: tuple<u8, u8, u8, u8, u8, u8, u8, u8>,
//	}
type MacAddressEui64 struct {
	_     cm.HostLayout
	Bytes [8]uint8
}

// PgValue represents the variant "wasmcloud:postgres/types@0.1.1-draft#pg-value".
//
// Postgres data values, usable as parameters or via queries
// see: https://www.postgresql.org/docs/current/datatype.html
//
// This datatype is primarily intended to be used with the `raw` encoding scheme.
//
// NOTE: all numeric values are little-endian unless otherwise specified
//
//	variant pg-value {
//		null,
//		big-int(s64),
//		int8(s64),
//		int8-array(list<s64>),
//		big-serial(s64),
//		serial8(s64),
//		%bool(bool),
//		boolean(bool),
//		bool-array(list<bool>),
//		double(hashable-f64),
//		float8(hashable-f64),
//		float8-array(list<hashable-f64>),
//		real(hashable-f32),
//		float4(hashable-f32),
//		float4-array(list<hashable-f32>),
//		integer(s32),
//		int(s32),
//		int4(s32),
//		int4-array(list<s32>),
//		numeric(numeric),
//		decimal(numeric),
//		numeric-array(list<numeric>),
//		serial(u32),
//		serial4(u32),
//		small-int(s16),
//		int2(s16),
//		int2-array(list<s16>),
//		int2-vector(list<s16>),
//		int2-vector-array(list<list<s16>>),
//		small-serial(s16),
//		serial2(s16),
//		bit(tuple<u32, list<u8>>),
//		bit-array(list<tuple<u32, list<u8>>>),
//		bit-varying(tuple<option<u32>, list<u8>>),
//		varbit(tuple<option<u32>, list<u8>>),
//		varbit-array(list<tuple<option<u32>, list<u8>>>),
//		bytea(list<u8>),
//		bytea-array(list<list<u8>>),
//		%char(tuple<u32, list<u8>>),
//		char-array(list<tuple<u32, list<u8>>>),
//		varchar(tuple<option<u32>, list<u8>>),
//		varchar-array(list<tuple<option<u32>, list<u8>>>),
//		cidr(string),
//		cidr-array(list<string>),
//		inet(string),
//		inet-array(list<string>),
//		macaddr(mac-address-eui48),
//		macaddr-array(list<mac-address-eui48>),
//		macaddr8(mac-address-eui64),
//		macaddr8-array(list<mac-address-eui64>),
//		box(tuple<lower-left-point, upper-right-point>),
//		box-array(list<tuple<lower-left-point, upper-right-point>>),
//		circle(tuple<center-point, radius>),
//		circle-array(list<tuple<center-point, radius>>),
//		line(tuple<start-point, end-point>),
//		line-array(list<tuple<start-point, end-point>>),
//		lseg(tuple<start-point, end-point>),
//		lseg-array(list<tuple<start-point, end-point>>),
//		path(list<point>),
//		path-array(list<list<point>>),
//		point(point),
//		point-array(list<point>),
//		polygon(list<point>),
//		polygon-array(list<list<point>>),
//		date(date),
//		date-array(list<date>),
//		interval(interval),
//		interval-array(list<interval>),
//		time(time),
//		time-array(list<time>),
//		time-tz(time-tz),
//		time-tz-array(list<time-tz>),
//		timestamp(timestamp),
//		timestamp-array(list<timestamp>),
//		timestamp-tz(timestamp-tz),
//		timestamp-tz-array(list<timestamp-tz>),
//		json(string),
//		json-array(list<string>),
//		jsonb(string),
//		jsonb-array(list<string>),
//		money(numeric),
//		money-array(list<numeric>),
//		pg-lsn(u64),
//		pg-lsn-array(list<u64>),
//		pg-snapshot(tuple<xmin, xmax, xip-list>),
//		txid-snapshot(s64),
//		name(string),
//		name-array(list<string>),
//		text(string),
//		text-array(list<string>),
//		xml(string),
//		xml-array(list<string>),
//		ts-query(string),
//		ts-vector(list<lexeme>),
//		uuid(string),
//		uuid-array(list<string>),
//		hstore(list<tuple<string, option<string>>>),
//	}
type PgValue cm.Variant[uint8, TupleLowerLeftPointUpperRightPointShape, int64]

// PgValueNull returns a [PgValue] of case "null".
func PgValueNull() PgValue {
	var data struct{}
	return cm.New[PgValue](0, data)
}

// Null returns true if [PgValue] represents the variant case "null".
func (self *PgValue) Null() bool {
	return self.Tag() == 0
}

// PgValueBigInt returns a [PgValue] of case "big-int".
//
// Numeric
func PgValueBigInt(data int64) PgValue {
	return cm.New[PgValue](1, data)
}

// BigInt returns a non-nil *[int64] if [PgValue] represents the variant case "big-int".
func (self *PgValue) BigInt() *int64 {
	return cm.Case[int64](self, 1)
}

// PgValueInt8 returns a [PgValue] of case "int8".
func PgValueInt8(data int64) PgValue {
	return cm.New[PgValue](2, data)
}

// Int8 returns a non-nil *[int64] if [PgValue] represents the variant case "int8".
func (self *PgValue) Int8() *int64 {
	return cm.Case[int64](self, 2)
}

// PgValueInt8Array returns a [PgValue] of case "int8-array".
func PgValueInt8Array(data cm.List[int64]) PgValue {
	return cm.New[PgValue](3, data)
}

// Int8Array returns a non-nil *[cm.List[int64]] if [PgValue] represents the variant case "int8-array".
func (self *PgValue) Int8Array() *cm.List[int64] {
	return cm.Case[cm.List[int64]](self, 3)
}

// PgValueBigSerial returns a [PgValue] of case "big-serial".
func PgValueBigSerial(data int64) PgValue {
	return cm.New[PgValue](4, data)
}

// BigSerial returns a non-nil *[int64] if [PgValue] represents the variant case "big-serial".
func (self *PgValue) BigSerial() *int64 {
	return cm.Case[int64](self, 4)
}

// PgValueSerial8 returns a [PgValue] of case "serial8".
func PgValueSerial8(data int64) PgValue {
	return cm.New[PgValue](5, data)
}

// Serial8 returns a non-nil *[int64] if [PgValue] represents the variant case "serial8".
func (self *PgValue) Serial8() *int64 {
	return cm.Case[int64](self, 5)
}

// PgValueBool returns a [PgValue] of case "bool".
func PgValueBool(data bool) PgValue {
	return cm.New[PgValue](6, data)
}

// Bool returns a non-nil *[bool] if [PgValue] represents the variant case "bool".
func (self *PgValue) Bool() *bool {
	return cm.Case[bool](self, 6)
}

// PgValueBoolean returns a [PgValue] of case "boolean".
func PgValueBoolean(data bool) PgValue {
	return cm.New[PgValue](7, data)
}

// Boolean returns a non-nil *[bool] if [PgValue] represents the variant case "boolean".
func (self *PgValue) Boolean() *bool {
	return cm.Case[bool](self, 7)
}

// PgValueBoolArray returns a [PgValue] of case "bool-array".
func PgValueBoolArray(data cm.List[bool]) PgValue {
	return cm.New[PgValue](8, data)
}

// BoolArray returns a non-nil *[cm.List[bool]] if [PgValue] represents the variant case "bool-array".
func (self *PgValue) BoolArray() *cm.List[bool] {
	return cm.Case[cm.List[bool]](self, 8)
}

// PgValueDouble returns a [PgValue] of case "double".
func PgValueDouble(data HashableF64) PgValue {
	return cm.New[PgValue](9, data)
}

// Double returns a non-nil *[HashableF64] if [PgValue] represents the variant case "double".
func (self *PgValue) Double() *HashableF64 {
	return cm.Case[HashableF64](self, 9)
}

// PgValueFloat8 returns a [PgValue] of case "float8".
func PgValueFloat8(data HashableF64) PgValue {
	return cm.New[PgValue](10, data)
}

// Float8 returns a non-nil *[HashableF64] if [PgValue] represents the variant case "float8".
func (self *PgValue) Float8() *HashableF64 {
	return cm.Case[HashableF64](self, 10)
}

// PgValueFloat8Array returns a [PgValue] of case "float8-array".
func PgValueFloat8Array(data cm.List[HashableF64]) PgValue {
	return cm.New[PgValue](11, data)
}

// Float8Array returns a non-nil *[cm.List[HashableF64]] if [PgValue] represents the variant case "float8-array".
func (self *PgValue) Float8Array() *cm.List[HashableF64] {
	return cm.Case[cm.List[HashableF64]](self, 11)
}

// PgValueReal returns a [PgValue] of case "real".
func PgValueReal(data HashableF32) PgValue {
	return cm.New[PgValue](12, data)
}

// Real returns a non-nil *[HashableF32] if [PgValue] represents the variant case "real".
func (self *PgValue) Real() *HashableF32 {
	return cm.Case[HashableF32](self, 12)
}

// PgValueFloat4 returns a [PgValue] of case "float4".
func PgValueFloat4(data HashableF32) PgValue {
	return cm.New[PgValue](13, data)
}

// Float4 returns a non-nil *[HashableF32] if [PgValue] represents the variant case "float4".
func (self *PgValue) Float4() *HashableF32 {
	return cm.Case[HashableF32](self, 13)
}

// PgValueFloat4Array returns a [PgValue] of case "float4-array".
func PgValueFloat4Array(data cm.List[HashableF32]) PgValue {
	return cm.New[PgValue](14, data)
}

// Float4Array returns a non-nil *[cm.List[HashableF32]] if [PgValue] represents the variant case "float4-array".
func (self *PgValue) Float4Array() *cm.List[HashableF32] {
	return cm.Case[cm.List[HashableF32]](self, 14)
}

// PgValueInteger returns a [PgValue] of case "integer".
func PgValueInteger(data int32) PgValue {
	return cm.New[PgValue](15, data)
}

// Integer returns a non-nil *[int32] if [PgValue] represents the variant case "integer".
func (self *PgValue) Integer() *int32 {
	return cm.Case[int32](self, 15)
}

// PgValueInt returns a [PgValue] of case "int".
func PgValueInt(data int32) PgValue {
	return cm.New[PgValue](16, data)
}

// Int returns a non-nil *[int32] if [PgValue] represents the variant case "int".
func (self *PgValue) Int() *int32 {
	return cm.Case[int32](self, 16)
}

// PgValueInt4 returns a [PgValue] of case "int4".
func PgValueInt4(data int32) PgValue {
	return cm.New[PgValue](17, data)
}

// Int4 returns a non-nil *[int32] if [PgValue] represents the variant case "int4".
func (self *PgValue) Int4() *int32 {
	return cm.Case[int32](self, 17)
}

// PgValueInt4Array returns a [PgValue] of case "int4-array".
func PgValueInt4Array(data cm.List[int32]) PgValue {
	return cm.New[PgValue](18, data)
}

// Int4Array returns a non-nil *[cm.List[int32]] if [PgValue] represents the variant case "int4-array".
func (self *PgValue) Int4Array() *cm.List[int32] {
	return cm.Case[cm.List[int32]](self, 18)
}

// PgValueNumeric_ returns a [PgValue] of case "numeric".
func PgValueNumeric_(data Numeric) PgValue {
	return cm.New[PgValue](19, data)
}

// Numeric_ returns a non-nil *[Numeric] if [PgValue] represents the variant case "numeric".
func (self *PgValue) Numeric_() *Numeric {
	return cm.Case[Numeric](self, 19)
}

// PgValueDecimal returns a [PgValue] of case "decimal".
func PgValueDecimal(data Numeric) PgValue {
	return cm.New[PgValue](20, data)
}

// Decimal returns a non-nil *[Numeric] if [PgValue] represents the variant case "decimal".
func (self *PgValue) Decimal() *Numeric {
	return cm.Case[Numeric](self, 20)
}

// PgValueNumericArray returns a [PgValue] of case "numeric-array".
func PgValueNumericArray(data cm.List[Numeric]) PgValue {
	return cm.New[PgValue](21, data)
}

// NumericArray returns a non-nil *[cm.List[Numeric]] if [PgValue] represents the variant case "numeric-array".
func (self *PgValue) NumericArray() *cm.List[Numeric] {
	return cm.Case[cm.List[Numeric]](self, 21)
}

// PgValueSerial returns a [PgValue] of case "serial".
func PgValueSerial(data uint32) PgValue {
	return cm.New[PgValue](22, data)
}

// Serial returns a non-nil *[uint32] if [PgValue] represents the variant case "serial".
func (self *PgValue) Serial() *uint32 {
	return cm.Case[uint32](self, 22)
}

// PgValueSerial4 returns a [PgValue] of case "serial4".
func PgValueSerial4(data uint32) PgValue {
	return cm.New[PgValue](23, data)
}

// Serial4 returns a non-nil *[uint32] if [PgValue] represents the variant case "serial4".
func (self *PgValue) Serial4() *uint32 {
	return cm.Case[uint32](self, 23)
}

// PgValueSmallInt returns a [PgValue] of case "small-int".
func PgValueSmallInt(data int16) PgValue {
	return cm.New[PgValue](24, data)
}

// SmallInt returns a non-nil *[int16] if [PgValue] represents the variant case "small-int".
func (self *PgValue) SmallInt() *int16 {
	return cm.Case[int16](self, 24)
}

// PgValueInt2 returns a [PgValue] of case "int2".
func PgValueInt2(data int16) PgValue {
	return cm.New[PgValue](25, data)
}

// Int2 returns a non-nil *[int16] if [PgValue] represents the variant case "int2".
func (self *PgValue) Int2() *int16 {
	return cm.Case[int16](self, 25)
}

// PgValueInt2Array returns a [PgValue] of case "int2-array".
func PgValueInt2Array(data cm.List[int16]) PgValue {
	return cm.New[PgValue](26, data)
}

// Int2Array returns a non-nil *[cm.List[int16]] if [PgValue] represents the variant case "int2-array".
func (self *PgValue) Int2Array() *cm.List[int16] {
	return cm.Case[cm.List[int16]](self, 26)
}

// PgValueInt2Vector returns a [PgValue] of case "int2-vector".
func PgValueInt2Vector(data cm.List[int16]) PgValue {
	return cm.New[PgValue](27, data)
}

// Int2Vector returns a non-nil *[cm.List[int16]] if [PgValue] represents the variant case "int2-vector".
func (self *PgValue) Int2Vector() *cm.List[int16] {
	return cm.Case[cm.List[int16]](self, 27)
}

// PgValueInt2VectorArray returns a [PgValue] of case "int2-vector-array".
func PgValueInt2VectorArray(data cm.List[cm.List[int16]]) PgValue {
	return cm.New[PgValue](28, data)
}

// Int2VectorArray returns a non-nil *[cm.List[cm.List[int16]]] if [PgValue] represents the variant case "int2-vector-array".
func (self *PgValue) Int2VectorArray() *cm.List[cm.List[int16]] {
	return cm.Case[cm.List[cm.List[int16]]](self, 28)
}

// PgValueSmallSerial returns a [PgValue] of case "small-serial".
func PgValueSmallSerial(data int16) PgValue {
	return cm.New[PgValue](29, data)
}

// SmallSerial returns a non-nil *[int16] if [PgValue] represents the variant case "small-serial".
func (self *PgValue) SmallSerial() *int16 {
	return cm.Case[int16](self, 29)
}

// PgValueSerial2 returns a [PgValue] of case "serial2".
func PgValueSerial2(data int16) PgValue {
	return cm.New[PgValue](30, data)
}

// Serial2 returns a non-nil *[int16] if [PgValue] represents the variant case "serial2".
func (self *PgValue) Serial2() *int16 {
	return cm.Case[int16](self, 30)
}

// PgValueBit returns a [PgValue] of case "bit".
//
// note: matches tokio-postgres
// Bytes
//
// For bit & bit-varying, see the encoding scheme used by bit-vec:
// https://contain-rs.github.io/bit-vec/bit_vec/struct.BitVec.html#method.to_bytes
func PgValueBit(data cm.Tuple[uint32, cm.List[uint8]]) PgValue {
	return cm.New[PgValue](31, data)
}

// Bit returns a non-nil *[cm.Tuple[uint32, cm.List[uint8]]] if [PgValue] represents the variant case "bit".
func (self *PgValue) Bit() *cm.Tuple[uint32, cm.List[uint8]] {
	return cm.Case[cm.Tuple[uint32, cm.List[uint8]]](self, 31)
}

// PgValueBitArray returns a [PgValue] of case "bit-array".
func PgValueBitArray(data cm.List[cm.Tuple[uint32, cm.List[uint8]]]) PgValue {
	return cm.New[PgValue](32, data)
}

// BitArray returns a non-nil *[cm.List[cm.Tuple[uint32, cm.List[uint8]]]] if [PgValue] represents the variant case "bit-array".
func (self *PgValue) BitArray() *cm.List[cm.Tuple[uint32, cm.List[uint8]]] {
	return cm.Case[cm.List[cm.Tuple[uint32, cm.List[uint8]]]](self, 32)
}

// PgValueBitVarying returns a [PgValue] of case "bit-varying".
func PgValueBitVarying(data cm.Tuple[cm.Option[uint32], cm.List[uint8]]) PgValue {
	return cm.New[PgValue](33, data)
}

// BitVarying returns a non-nil *[cm.Tuple[cm.Option[uint32], cm.List[uint8]]] if [PgValue] represents the variant case "bit-varying".
func (self *PgValue) BitVarying() *cm.Tuple[cm.Option[uint32], cm.List[uint8]] {
	return cm.Case[cm.Tuple[cm.Option[uint32], cm.List[uint8]]](self, 33)
}

// PgValueVarbit returns a [PgValue] of case "varbit".
func PgValueVarbit(data cm.Tuple[cm.Option[uint32], cm.List[uint8]]) PgValue {
	return cm.New[PgValue](34, data)
}

// Varbit returns a non-nil *[cm.Tuple[cm.Option[uint32], cm.List[uint8]]] if [PgValue] represents the variant case "varbit".
func (self *PgValue) Varbit() *cm.Tuple[cm.Option[uint32], cm.List[uint8]] {
	return cm.Case[cm.Tuple[cm.Option[uint32], cm.List[uint8]]](self, 34)
}

// PgValueVarbitArray returns a [PgValue] of case "varbit-array".
func PgValueVarbitArray(data cm.List[cm.Tuple[cm.Option[uint32], cm.List[uint8]]]) PgValue {
	return cm.New[PgValue](35, data)
}

// VarbitArray returns a non-nil *[cm.List[cm.Tuple[cm.Option[uint32], cm.List[uint8]]]] if [PgValue] represents the variant case "varbit-array".
func (self *PgValue) VarbitArray() *cm.List[cm.Tuple[cm.Option[uint32], cm.List[uint8]]] {
	return cm.Case[cm.List[cm.Tuple[cm.Option[uint32], cm.List[uint8]]]](self, 35)
}

// PgValueBytea returns a [PgValue] of case "bytea".
func PgValueBytea(data cm.List[uint8]) PgValue {
	return cm.New[PgValue](36, data)
}

// Bytea returns a non-nil *[cm.List[uint8]] if [PgValue] represents the variant case "bytea".
func (self *PgValue) Bytea() *cm.List[uint8] {
	return cm.Case[cm.List[uint8]](self, 36)
}

// PgValueByteaArray returns a [PgValue] of case "bytea-array".
func PgValueByteaArray(data cm.List[cm.List[uint8]]) PgValue {
	return cm.New[PgValue](37, data)
}

// ByteaArray returns a non-nil *[cm.List[cm.List[uint8]]] if [PgValue] represents the variant case "bytea-array".
func (self *PgValue) ByteaArray() *cm.List[cm.List[uint8]] {
	return cm.Case[cm.List[cm.List[uint8]]](self, 37)
}

// PgValueChar returns a [PgValue] of case "char".
//
// Characters
// TODO: specify text encoding, to negotiate possible component/DB mismatch?
func PgValueChar(data cm.Tuple[uint32, cm.List[uint8]]) PgValue {
	return cm.New[PgValue](38, data)
}

// Char returns a non-nil *[cm.Tuple[uint32, cm.List[uint8]]] if [PgValue] represents the variant case "char".
func (self *PgValue) Char() *cm.Tuple[uint32, cm.List[uint8]] {
	return cm.Case[cm.Tuple[uint32, cm.List[uint8]]](self, 38)
}

// PgValueCharArray returns a [PgValue] of case "char-array".
func PgValueCharArray(data cm.List[cm.Tuple[uint32, cm.List[uint8]]]) PgValue {
	return cm.New[PgValue](39, data)
}

// CharArray returns a non-nil *[cm.List[cm.Tuple[uint32, cm.List[uint8]]]] if [PgValue] represents the variant case "char-array".
func (self *PgValue) CharArray() *cm.List[cm.Tuple[uint32, cm.List[uint8]]] {
	return cm.Case[cm.List[cm.Tuple[uint32, cm.List[uint8]]]](self, 39)
}

// PgValueVarchar returns a [PgValue] of case "varchar".
func PgValueVarchar(data cm.Tuple[cm.Option[uint32], cm.List[uint8]]) PgValue {
	return cm.New[PgValue](40, data)
}

// Varchar returns a non-nil *[cm.Tuple[cm.Option[uint32], cm.List[uint8]]] if [PgValue] represents the variant case "varchar".
func (self *PgValue) Varchar() *cm.Tuple[cm.Option[uint32], cm.List[uint8]] {
	return cm.Case[cm.Tuple[cm.Option[uint32], cm.List[uint8]]](self, 40)
}

// PgValueVarcharArray returns a [PgValue] of case "varchar-array".
func PgValueVarcharArray(data cm.List[cm.Tuple[cm.Option[uint32], cm.List[uint8]]]) PgValue {
	return cm.New[PgValue](41, data)
}

// VarcharArray returns a non-nil *[cm.List[cm.Tuple[cm.Option[uint32], cm.List[uint8]]]] if [PgValue] represents the variant case "varchar-array".
func (self *PgValue) VarcharArray() *cm.List[cm.Tuple[cm.Option[uint32], cm.List[uint8]]] {
	return cm.Case[cm.List[cm.Tuple[cm.Option[uint32], cm.List[uint8]]]](self, 41)
}

// PgValueCidr returns a [PgValue] of case "cidr".
//
// Networking
func PgValueCidr(data string) PgValue {
	return cm.New[PgValue](42, data)
}

// Cidr returns a non-nil *[string] if [PgValue] represents the variant case "cidr".
func (self *PgValue) Cidr() *string {
	return cm.Case[string](self, 42)
}

// PgValueCidrArray returns a [PgValue] of case "cidr-array".
func PgValueCidrArray(data cm.List[string]) PgValue {
	return cm.New[PgValue](43, data)
}

// CidrArray returns a non-nil *[cm.List[string]] if [PgValue] represents the variant case "cidr-array".
func (self *PgValue) CidrArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 43)
}

// PgValueInet returns a [PgValue] of case "inet".
func PgValueInet(data string) PgValue {
	return cm.New[PgValue](44, data)
}

// Inet returns a non-nil *[string] if [PgValue] represents the variant case "inet".
func (self *PgValue) Inet() *string {
	return cm.Case[string](self, 44)
}

// PgValueInetArray returns a [PgValue] of case "inet-array".
func PgValueInetArray(data cm.List[string]) PgValue {
	return cm.New[PgValue](45, data)
}

// InetArray returns a non-nil *[cm.List[string]] if [PgValue] represents the variant case "inet-array".
func (self *PgValue) InetArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 45)
}

// PgValueMacaddr returns a [PgValue] of case "macaddr".
func PgValueMacaddr(data MacAddressEui48) PgValue {
	return cm.New[PgValue](46, data)
}

// Macaddr returns a non-nil *[MacAddressEui48] if [PgValue] represents the variant case "macaddr".
func (self *PgValue) Macaddr() *MacAddressEui48 {
	return cm.Case[MacAddressEui48](self, 46)
}

// PgValueMacaddrArray returns a [PgValue] of case "macaddr-array".
//
// EUI-48
func PgValueMacaddrArray(data cm.List[MacAddressEui48]) PgValue {
	return cm.New[PgValue](47, data)
}

// MacaddrArray returns a non-nil *[cm.List[MacAddressEui48]] if [PgValue] represents the variant case "macaddr-array".
func (self *PgValue) MacaddrArray() *cm.List[MacAddressEui48] {
	return cm.Case[cm.List[MacAddressEui48]](self, 47)
}

// PgValueMacaddr8 returns a [PgValue] of case "macaddr8".
//
// EUI-48
func PgValueMacaddr8(data MacAddressEui64) PgValue {
	return cm.New[PgValue](48, data)
}

// Macaddr8 returns a non-nil *[MacAddressEui64] if [PgValue] represents the variant case "macaddr8".
func (self *PgValue) Macaddr8() *MacAddressEui64 {
	return cm.Case[MacAddressEui64](self, 48)
}

// PgValueMacaddr8Array returns a [PgValue] of case "macaddr8-array".
//
// EUI-64 (deprecated)
func PgValueMacaddr8Array(data cm.List[MacAddressEui64]) PgValue {
	return cm.New[PgValue](49, data)
}

// Macaddr8Array returns a non-nil *[cm.List[MacAddressEui64]] if [PgValue] represents the variant case "macaddr8-array".
func (self *PgValue) Macaddr8Array() *cm.List[MacAddressEui64] {
	return cm.Case[cm.List[MacAddressEui64]](self, 49)
}

// PgValueBox returns a [PgValue] of case "box".
//
// EUI-64 (deprecated)
// Geo
func PgValueBox(data cm.Tuple[LowerLeftPoint, UpperRightPoint]) PgValue {
	return cm.New[PgValue](50, data)
}

// Box returns a non-nil *[cm.Tuple[LowerLeftPoint, UpperRightPoint]] if [PgValue] represents the variant case "box".
func (self *PgValue) Box() *cm.Tuple[LowerLeftPoint, UpperRightPoint] {
	return cm.Case[cm.Tuple[LowerLeftPoint, UpperRightPoint]](self, 50)
}

// PgValueBoxArray returns a [PgValue] of case "box-array".
func PgValueBoxArray(data cm.List[cm.Tuple[LowerLeftPoint, UpperRightPoint]]) PgValue {
	return cm.New[PgValue](51, data)
}

// BoxArray returns a non-nil *[cm.List[cm.Tuple[LowerLeftPoint, UpperRightPoint]]] if [PgValue] represents the variant case "box-array".
func (self *PgValue) BoxArray() *cm.List[cm.Tuple[LowerLeftPoint, UpperRightPoint]] {
	return cm.Case[cm.List[cm.Tuple[LowerLeftPoint, UpperRightPoint]]](self, 51)
}

// PgValueCircle returns a [PgValue] of case "circle".
func PgValueCircle(data cm.Tuple[CenterPoint, Radius]) PgValue {
	return cm.New[PgValue](52, data)
}

// Circle returns a non-nil *[cm.Tuple[CenterPoint, Radius]] if [PgValue] represents the variant case "circle".
func (self *PgValue) Circle() *cm.Tuple[CenterPoint, Radius] {
	return cm.Case[cm.Tuple[CenterPoint, Radius]](self, 52)
}

// PgValueCircleArray returns a [PgValue] of case "circle-array".
func PgValueCircleArray(data cm.List[cm.Tuple[CenterPoint, Radius]]) PgValue {
	return cm.New[PgValue](53, data)
}

// CircleArray returns a non-nil *[cm.List[cm.Tuple[CenterPoint, Radius]]] if [PgValue] represents the variant case "circle-array".
func (self *PgValue) CircleArray() *cm.List[cm.Tuple[CenterPoint, Radius]] {
	return cm.Case[cm.List[cm.Tuple[CenterPoint, Radius]]](self, 53)
}

// PgValueLine returns a [PgValue] of case "line".
func PgValueLine(data cm.Tuple[StartPoint, EndPoint]) PgValue {
	return cm.New[PgValue](54, data)
}

// Line returns a non-nil *[cm.Tuple[StartPoint, EndPoint]] if [PgValue] represents the variant case "line".
func (self *PgValue) Line() *cm.Tuple[StartPoint, EndPoint] {
	return cm.Case[cm.Tuple[StartPoint, EndPoint]](self, 54)
}

// PgValueLineArray returns a [PgValue] of case "line-array".
func PgValueLineArray(data cm.List[cm.Tuple[StartPoint, EndPoint]]) PgValue {
	return cm.New[PgValue](55, data)
}

// LineArray returns a non-nil *[cm.List[cm.Tuple[StartPoint, EndPoint]]] if [PgValue] represents the variant case "line-array".
func (self *PgValue) LineArray() *cm.List[cm.Tuple[StartPoint, EndPoint]] {
	return cm.Case[cm.List[cm.Tuple[StartPoint, EndPoint]]](self, 55)
}

// PgValueLseg returns a [PgValue] of case "lseg".
func PgValueLseg(data cm.Tuple[StartPoint, EndPoint]) PgValue {
	return cm.New[PgValue](56, data)
}

// Lseg returns a non-nil *[cm.Tuple[StartPoint, EndPoint]] if [PgValue] represents the variant case "lseg".
func (self *PgValue) Lseg() *cm.Tuple[StartPoint, EndPoint] {
	return cm.Case[cm.Tuple[StartPoint, EndPoint]](self, 56)
}

// PgValueLsegArray returns a [PgValue] of case "lseg-array".
func PgValueLsegArray(data cm.List[cm.Tuple[StartPoint, EndPoint]]) PgValue {
	return cm.New[PgValue](57, data)
}

// LsegArray returns a non-nil *[cm.List[cm.Tuple[StartPoint, EndPoint]]] if [PgValue] represents the variant case "lseg-array".
func (self *PgValue) LsegArray() *cm.List[cm.Tuple[StartPoint, EndPoint]] {
	return cm.Case[cm.List[cm.Tuple[StartPoint, EndPoint]]](self, 57)
}

// PgValuePath returns a [PgValue] of case "path".
func PgValuePath(data cm.List[Point]) PgValue {
	return cm.New[PgValue](58, data)
}

// Path returns a non-nil *[cm.List[Point]] if [PgValue] represents the variant case "path".
func (self *PgValue) Path() *cm.List[Point] {
	return cm.Case[cm.List[Point]](self, 58)
}

// PgValuePathArray returns a [PgValue] of case "path-array".
func PgValuePathArray(data cm.List[cm.List[Point]]) PgValue {
	return cm.New[PgValue](59, data)
}

// PathArray returns a non-nil *[cm.List[cm.List[Point]]] if [PgValue] represents the variant case "path-array".
func (self *PgValue) PathArray() *cm.List[cm.List[Point]] {
	return cm.Case[cm.List[cm.List[Point]]](self, 59)
}

// PgValuePoint_ returns a [PgValue] of case "point".
func PgValuePoint_(data Point) PgValue {
	return cm.New[PgValue](60, data)
}

// Point_ returns a non-nil *[Point] if [PgValue] represents the variant case "point".
func (self *PgValue) Point_() *Point {
	return cm.Case[Point](self, 60)
}

// PgValuePointArray returns a [PgValue] of case "point-array".
func PgValuePointArray(data cm.List[Point]) PgValue {
	return cm.New[PgValue](61, data)
}

// PointArray returns a non-nil *[cm.List[Point]] if [PgValue] represents the variant case "point-array".
func (self *PgValue) PointArray() *cm.List[Point] {
	return cm.Case[cm.List[Point]](self, 61)
}

// PgValuePolygon returns a [PgValue] of case "polygon".
func PgValuePolygon(data cm.List[Point]) PgValue {
	return cm.New[PgValue](62, data)
}

// Polygon returns a non-nil *[cm.List[Point]] if [PgValue] represents the variant case "polygon".
func (self *PgValue) Polygon() *cm.List[Point] {
	return cm.Case[cm.List[Point]](self, 62)
}

// PgValuePolygonArray returns a [PgValue] of case "polygon-array".
func PgValuePolygonArray(data cm.List[cm.List[Point]]) PgValue {
	return cm.New[PgValue](63, data)
}

// PolygonArray returns a non-nil *[cm.List[cm.List[Point]]] if [PgValue] represents the variant case "polygon-array".
func (self *PgValue) PolygonArray() *cm.List[cm.List[Point]] {
	return cm.Case[cm.List[cm.List[Point]]](self, 63)
}

// PgValueDate_ returns a [PgValue] of case "date".
//
// Date-time
func PgValueDate_(data Date) PgValue {
	return cm.New[PgValue](64, data)
}

// Date_ returns a non-nil *[Date] if [PgValue] represents the variant case "date".
func (self *PgValue) Date_() *Date {
	return cm.Case[Date](self, 64)
}

// PgValueDateArray returns a [PgValue] of case "date-array".
func PgValueDateArray(data cm.List[Date]) PgValue {
	return cm.New[PgValue](65, data)
}

// DateArray returns a non-nil *[cm.List[Date]] if [PgValue] represents the variant case "date-array".
func (self *PgValue) DateArray() *cm.List[Date] {
	return cm.Case[cm.List[Date]](self, 65)
}

// PgValueInterval_ returns a [PgValue] of case "interval".
func PgValueInterval_(data Interval) PgValue {
	return cm.New[PgValue](66, data)
}

// Interval_ returns a non-nil *[Interval] if [PgValue] represents the variant case "interval".
func (self *PgValue) Interval_() *Interval {
	return cm.Case[Interval](self, 66)
}

// PgValueIntervalArray returns a [PgValue] of case "interval-array".
func PgValueIntervalArray(data cm.List[Interval]) PgValue {
	return cm.New[PgValue](67, data)
}

// IntervalArray returns a non-nil *[cm.List[Interval]] if [PgValue] represents the variant case "interval-array".
func (self *PgValue) IntervalArray() *cm.List[Interval] {
	return cm.Case[cm.List[Interval]](self, 67)
}

// PgValueTime_ returns a [PgValue] of case "time".
func PgValueTime_(data Time) PgValue {
	return cm.New[PgValue](68, data)
}

// Time_ returns a non-nil *[Time] if [PgValue] represents the variant case "time".
func (self *PgValue) Time_() *Time {
	return cm.Case[Time](self, 68)
}

// PgValueTimeArray returns a [PgValue] of case "time-array".
func PgValueTimeArray(data cm.List[Time]) PgValue {
	return cm.New[PgValue](69, data)
}

// TimeArray returns a non-nil *[cm.List[Time]] if [PgValue] represents the variant case "time-array".
func (self *PgValue) TimeArray() *cm.List[Time] {
	return cm.Case[cm.List[Time]](self, 69)
}

// PgValueTimeTz_ returns a [PgValue] of case "time-tz".
func PgValueTimeTz_(data TimeTz) PgValue {
	return cm.New[PgValue](70, data)
}

// TimeTz_ returns a non-nil *[TimeTz] if [PgValue] represents the variant case "time-tz".
func (self *PgValue) TimeTz_() *TimeTz {
	return cm.Case[TimeTz](self, 70)
}

// PgValueTimeTzArray returns a [PgValue] of case "time-tz-array".
func PgValueTimeTzArray(data cm.List[TimeTz]) PgValue {
	return cm.New[PgValue](71, data)
}

// TimeTzArray returns a non-nil *[cm.List[TimeTz]] if [PgValue] represents the variant case "time-tz-array".
func (self *PgValue) TimeTzArray() *cm.List[TimeTz] {
	return cm.Case[cm.List[TimeTz]](self, 71)
}

// PgValueTimestamp_ returns a [PgValue] of case "timestamp".
func PgValueTimestamp_(data Timestamp) PgValue {
	return cm.New[PgValue](72, data)
}

// Timestamp_ returns a non-nil *[Timestamp] if [PgValue] represents the variant case "timestamp".
func (self *PgValue) Timestamp_() *Timestamp {
	return cm.Case[Timestamp](self, 72)
}

// PgValueTimestampArray returns a [PgValue] of case "timestamp-array".
func PgValueTimestampArray(data cm.List[Timestamp]) PgValue {
	return cm.New[PgValue](73, data)
}

// TimestampArray returns a non-nil *[cm.List[Timestamp]] if [PgValue] represents the variant case "timestamp-array".
func (self *PgValue) TimestampArray() *cm.List[Timestamp] {
	return cm.Case[cm.List[Timestamp]](self, 73)
}

// PgValueTimestampTz_ returns a [PgValue] of case "timestamp-tz".
func PgValueTimestampTz_(data TimestampTz) PgValue {
	return cm.New[PgValue](74, data)
}

// TimestampTz_ returns a non-nil *[TimestampTz] if [PgValue] represents the variant case "timestamp-tz".
func (self *PgValue) TimestampTz_() *TimestampTz {
	return cm.Case[TimestampTz](self, 74)
}

// PgValueTimestampTzArray returns a [PgValue] of case "timestamp-tz-array".
func PgValueTimestampTzArray(data cm.List[TimestampTz]) PgValue {
	return cm.New[PgValue](75, data)
}

// TimestampTzArray returns a non-nil *[cm.List[TimestampTz]] if [PgValue] represents the variant case "timestamp-tz-array".
func (self *PgValue) TimestampTzArray() *cm.List[TimestampTz] {
	return cm.Case[cm.List[TimestampTz]](self, 75)
}

// PgValueJSON returns a [PgValue] of case "json".
//
// JSON
func PgValueJSON(data string) PgValue {
	return cm.New[PgValue](76, data)
}

// JSON returns a non-nil *[string] if [PgValue] represents the variant case "json".
func (self *PgValue) JSON() *string {
	return cm.Case[string](self, 76)
}

// PgValueJSONArray returns a [PgValue] of case "json-array".
func PgValueJSONArray(data cm.List[string]) PgValue {
	return cm.New[PgValue](77, data)
}

// JSONArray returns a non-nil *[cm.List[string]] if [PgValue] represents the variant case "json-array".
func (self *PgValue) JSONArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 77)
}

// PgValueJsonb returns a [PgValue] of case "jsonb".
func PgValueJsonb(data string) PgValue {
	return cm.New[PgValue](78, data)
}

// Jsonb returns a non-nil *[string] if [PgValue] represents the variant case "jsonb".
func (self *PgValue) Jsonb() *string {
	return cm.Case[string](self, 78)
}

// PgValueJsonbArray returns a [PgValue] of case "jsonb-array".
func PgValueJsonbArray(data cm.List[string]) PgValue {
	return cm.New[PgValue](79, data)
}

// JsonbArray returns a non-nil *[cm.List[string]] if [PgValue] represents the variant case "jsonb-array".
func (self *PgValue) JsonbArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 79)
}

// PgValueMoney returns a [PgValue] of case "money".
//
// Money (use is discouraged)
//
// fractional precision is determined by the database's `lc_monetary` setting.
//
// NOTE: if you are storing currency amounts, consider
// using integer (whole number) counts of smallest indivisible pieces of currency
// (ex. cent amounts to represent United States Dollars; 100 cents = 1 USD)
func PgValueMoney(data Numeric) PgValue {
	return cm.New[PgValue](80, data)
}

// Money returns a non-nil *[Numeric] if [PgValue] represents the variant case "money".
func (self *PgValue) Money() *Numeric {
	return cm.Case[Numeric](self, 80)
}

// PgValueMoneyArray returns a [PgValue] of case "money-array".
func PgValueMoneyArray(data cm.List[Numeric]) PgValue {
	return cm.New[PgValue](81, data)
}

// MoneyArray returns a non-nil *[cm.List[Numeric]] if [PgValue] represents the variant case "money-array".
func (self *PgValue) MoneyArray() *cm.List[Numeric] {
	return cm.Case[cm.List[Numeric]](self, 81)
}

// PgValuePgLsn returns a [PgValue] of case "pg-lsn".
//
// Postgres-internal
func PgValuePgLsn(data uint64) PgValue {
	return cm.New[PgValue](82, data)
}

// PgLsn returns a non-nil *[uint64] if [PgValue] represents the variant case "pg-lsn".
func (self *PgValue) PgLsn() *uint64 {
	return cm.Case[uint64](self, 82)
}

// PgValuePgLsnArray returns a [PgValue] of case "pg-lsn-array".
func PgValuePgLsnArray(data cm.List[uint64]) PgValue {
	return cm.New[PgValue](83, data)
}

// PgLsnArray returns a non-nil *[cm.List[uint64]] if [PgValue] represents the variant case "pg-lsn-array".
func (self *PgValue) PgLsnArray() *cm.List[uint64] {
	return cm.Case[cm.List[uint64]](self, 83)
}

// PgValuePgSnapshot returns a [PgValue] of case "pg-snapshot".
//
// see: https://www.postgresql.org/docs/current/functions-info.html#FUNCTIONS-PG-SNAPSHOT-PARTS
func PgValuePgSnapshot(data cm.Tuple3[Xmin, Xmax, XipList]) PgValue {
	return cm.New[PgValue](84, data)
}

// PgSnapshot returns a non-nil *[cm.Tuple3[Xmin, Xmax, XipList]] if [PgValue] represents the variant case "pg-snapshot".
func (self *PgValue) PgSnapshot() *cm.Tuple3[Xmin, Xmax, XipList] {
	return cm.Case[cm.Tuple3[Xmin, Xmax, XipList]](self, 84)
}

// PgValueTxidSnapshot returns a [PgValue] of case "txid-snapshot".
func PgValueTxidSnapshot(data int64) PgValue {
	return cm.New[PgValue](85, data)
}

// TxidSnapshot returns a non-nil *[int64] if [PgValue] represents the variant case "txid-snapshot".
func (self *PgValue) TxidSnapshot() *int64 {
	return cm.Case[int64](self, 85)
}

// PgValueName returns a [PgValue] of case "name".
//
// Text
func PgValueName(data string) PgValue {
	return cm.New[PgValue](86, data)
}

// Name returns a non-nil *[string] if [PgValue] represents the variant case "name".
func (self *PgValue) Name() *string {
	return cm.Case[string](self, 86)
}

// PgValueNameArray returns a [PgValue] of case "name-array".
func PgValueNameArray(data cm.List[string]) PgValue {
	return cm.New[PgValue](87, data)
}

// NameArray returns a non-nil *[cm.List[string]] if [PgValue] represents the variant case "name-array".
func (self *PgValue) NameArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 87)
}

// PgValueText returns a [PgValue] of case "text".
func PgValueText(data string) PgValue {
	return cm.New[PgValue](88, data)
}

// Text returns a non-nil *[string] if [PgValue] represents the variant case "text".
func (self *PgValue) Text() *string {
	return cm.Case[string](self, 88)
}

// PgValueTextArray returns a [PgValue] of case "text-array".
func PgValueTextArray(data cm.List[string]) PgValue {
	return cm.New[PgValue](89, data)
}

// TextArray returns a non-nil *[cm.List[string]] if [PgValue] represents the variant case "text-array".
func (self *PgValue) TextArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 89)
}

// PgValueXML returns a [PgValue] of case "xml".
func PgValueXML(data string) PgValue {
	return cm.New[PgValue](90, data)
}

// XML returns a non-nil *[string] if [PgValue] represents the variant case "xml".
func (self *PgValue) XML() *string {
	return cm.Case[string](self, 90)
}

// PgValueXMLArray returns a [PgValue] of case "xml-array".
func PgValueXMLArray(data cm.List[string]) PgValue {
	return cm.New[PgValue](91, data)
}

// XMLArray returns a non-nil *[cm.List[string]] if [PgValue] represents the variant case "xml-array".
func (self *PgValue) XMLArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 91)
}

// PgValueTsQuery returns a [PgValue] of case "ts-query".
//
// Full Text Search
func PgValueTsQuery(data string) PgValue {
	return cm.New[PgValue](92, data)
}

// TsQuery returns a non-nil *[string] if [PgValue] represents the variant case "ts-query".
func (self *PgValue) TsQuery() *string {
	return cm.Case[string](self, 92)
}

// PgValueTsVector returns a [PgValue] of case "ts-vector".
func PgValueTsVector(data cm.List[Lexeme]) PgValue {
	return cm.New[PgValue](93, data)
}

// TsVector returns a non-nil *[cm.List[Lexeme]] if [PgValue] represents the variant case "ts-vector".
func (self *PgValue) TsVector() *cm.List[Lexeme] {
	return cm.Case[cm.List[Lexeme]](self, 93)
}

// PgValueUUID returns a [PgValue] of case "uuid".
//
// UUIDs
func PgValueUUID(data string) PgValue {
	return cm.New[PgValue](94, data)
}

// UUID returns a non-nil *[string] if [PgValue] represents the variant case "uuid".
func (self *PgValue) UUID() *string {
	return cm.Case[string](self, 94)
}

// PgValueUUIDArray returns a [PgValue] of case "uuid-array".
func PgValueUUIDArray(data cm.List[string]) PgValue {
	return cm.New[PgValue](95, data)
}

// UUIDArray returns a non-nil *[cm.List[string]] if [PgValue] represents the variant case "uuid-array".
func (self *PgValue) UUIDArray() *cm.List[string] {
	return cm.Case[cm.List[string]](self, 95)
}

// PgValueHstore returns a [PgValue] of case "hstore".
//
// Containers
func PgValueHstore(data cm.List[cm.Tuple[string, cm.Option[string]]]) PgValue {
	return cm.New[PgValue](96, data)
}

// Hstore returns a non-nil *[cm.List[cm.Tuple[string, cm.Option[string]]]] if [PgValue] represents the variant case "hstore".
func (self *PgValue) Hstore() *cm.List[cm.Tuple[string, cm.Option[string]]] {
	return cm.Case[cm.List[cm.Tuple[string, cm.Option[string]]]](self, 96)
}

var stringsPgValue = [97]string{
	"null",
	"big-int",
	"int8",
	"int8-array",
	"big-serial",
	"serial8",
	"bool",
	"boolean",
	"bool-array",
	"double",
	"float8",
	"float8-array",
	"real",
	"float4",
	"float4-array",
	"integer",
	"int",
	"int4",
	"int4-array",
	"numeric",
	"decimal",
	"numeric-array",
	"serial",
	"serial4",
	"small-int",
	"int2",
	"int2-array",
	"int2-vector",
	"int2-vector-array",
	"small-serial",
	"serial2",
	"bit",
	"bit-array",
	"bit-varying",
	"varbit",
	"varbit-array",
	"bytea",
	"bytea-array",
	"char",
	"char-array",
	"varchar",
	"varchar-array",
	"cidr",
	"cidr-array",
	"inet",
	"inet-array",
	"macaddr",
	"macaddr-array",
	"macaddr8",
	"macaddr8-array",
	"box",
	"box-array",
	"circle",
	"circle-array",
	"line",
	"line-array",
	"lseg",
	"lseg-array",
	"path",
	"path-array",
	"point",
	"point-array",
	"polygon",
	"polygon-array",
	"date",
	"date-array",
	"interval",
	"interval-array",
	"time",
	"time-array",
	"time-tz",
	"time-tz-array",
	"timestamp",
	"timestamp-array",
	"timestamp-tz",
	"timestamp-tz-array",
	"json",
	"json-array",
	"jsonb",
	"jsonb-array",
	"money",
	"money-array",
	"pg-lsn",
	"pg-lsn-array",
	"pg-snapshot",
	"txid-snapshot",
	"name",
	"name-array",
	"text",
	"text-array",
	"xml",
	"xml-array",
	"ts-query",
	"ts-vector",
	"uuid",
	"uuid-array",
	"hstore",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v PgValue) String() string {
	return stringsPgValue[v.Tag()]
}

// ResultRowEntry represents the record "wasmcloud:postgres/types@0.1.1-draft#result-row-entry".
//
//	record result-row-entry {
//		column-name: string,
//		value: pg-value,
//	}
type ResultRowEntry struct {
	_ cm.HostLayout
	// Name of the result column
	ColumnName string

	// Value of the result column
	Value PgValue
}

// ResultRow represents the list "wasmcloud:postgres/types@0.1.1-draft#result-row".
//
//	type result-row = list<result-row-entry>
type ResultRow cm.List[ResultRowEntry]
