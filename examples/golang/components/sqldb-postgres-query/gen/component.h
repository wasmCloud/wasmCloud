// Generated by `wit-bindgen` 0.33.0. DO NOT EDIT!
#ifndef __BINDINGS_COMPONENT_H
#define __BINDINGS_COMPONENT_H
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

typedef struct component_string_t {
  uint8_t*ptr;
  size_t len;
} component_string_t;

// Errors that occur while executing queries
typedef struct wasmcloud_postgres_types_query_error_t {
  uint8_t tag;
  union {
    component_string_t     invalid_params;
    component_string_t     invalid_query;
    component_string_t     unexpected;
  } val;
} wasmcloud_postgres_types_query_error_t;

// Unknown/invalid query parameters
#define WASMCLOUD_POSTGRES_TYPES_QUERY_ERROR_INVALID_PARAMS 0
// Invalid/malformed query
#define WASMCLOUD_POSTGRES_TYPES_QUERY_ERROR_INVALID_QUERY 1
// A completely unexpected error, specific to executing queries
#define WASMCLOUD_POSTGRES_TYPES_QUERY_ERROR_UNEXPECTED 2

// Errors that occur while preparing a statement
typedef struct wasmcloud_postgres_types_statement_prepare_error_t {
  uint8_t tag;
  union {
    component_string_t     unexpected;
  } val;
} wasmcloud_postgres_types_statement_prepare_error_t;

// A completely unexpected error
#define WASMCLOUD_POSTGRES_TYPES_STATEMENT_PREPARE_ERROR_UNEXPECTED 0

// Errors that occur during prepared statement execution
typedef struct wasmcloud_postgres_types_prepared_statement_exec_error_t {
  uint8_t tag;
  union {
    wasmcloud_postgres_types_query_error_t     query_error;
    component_string_t     unexpected;
  } val;
} wasmcloud_postgres_types_prepared_statement_exec_error_t;

// Unknown/invalid prepared statement token
#define WASMCLOUD_POSTGRES_TYPES_PREPARED_STATEMENT_EXEC_ERROR_UNKNOWN_PREPARED_QUERY 0
// An otherwise known query execution error
#define WASMCLOUD_POSTGRES_TYPES_PREPARED_STATEMENT_EXEC_ERROR_QUERY_ERROR 1
// A completely unexpected error, specific to prepared statements
#define WASMCLOUD_POSTGRES_TYPES_PREPARED_STATEMENT_EXEC_ERROR_UNEXPECTED 2

// This type of floating point is necessary as rust does not allow Eq/PartialEq/Hash on real `f64`
// Instead we use a sign + mantissa + exponent
// 
// see: https://docs.rs/num/latest/num/trait.Float.html#tymethod.integer_decode
typedef struct wasmcloud_postgres_types_hashable_f64_t {
  uint64_t   f0;
  int16_t   f1;
  int8_t   f2;
} wasmcloud_postgres_types_hashable_f64_t;

typedef wasmcloud_postgres_types_hashable_f64_t wasmcloud_postgres_types_hashable_f32_t;

typedef struct wasmcloud_postgres_types_point_t {
  wasmcloud_postgres_types_hashable_f64_t   f0;
  wasmcloud_postgres_types_hashable_f64_t   f1;
} wasmcloud_postgres_types_point_t;

typedef wasmcloud_postgres_types_point_t wasmcloud_postgres_types_lower_left_point_t;

typedef wasmcloud_postgres_types_point_t wasmcloud_postgres_types_upper_right_point_t;

typedef wasmcloud_postgres_types_point_t wasmcloud_postgres_types_start_point_t;

typedef wasmcloud_postgres_types_point_t wasmcloud_postgres_types_end_point_t;

typedef wasmcloud_postgres_types_point_t wasmcloud_postgres_types_center_point_t;

typedef wasmcloud_postgres_types_hashable_f64_t wasmcloud_postgres_types_radius_t;

typedef component_string_t wasmcloud_postgres_types_ipv4_addr_t;

typedef component_string_t wasmcloud_postgres_types_ipv6_addr_t;

typedef component_string_t wasmcloud_postgres_types_subnet_t;

typedef int64_t wasmcloud_postgres_types_xmin_t;

typedef int64_t wasmcloud_postgres_types_xmax_t;

typedef struct wasmcloud_postgres_types_xip_list_t {
  int64_t   *ptr;
  size_t len;
} wasmcloud_postgres_types_xip_list_t;

typedef uint32_t wasmcloud_postgres_types_logfile_num_t;

typedef uint32_t wasmcloud_postgres_types_logfile_byte_offset_t;

typedef component_string_t wasmcloud_postgres_types_column_name_t;

// Arbitrary precision numeric type
typedef component_string_t wasmcloud_postgres_types_numeric_t;

// Chosen weight of a Lexeme
typedef uint8_t wasmcloud_postgres_types_lexeme_weight_t;

#define WASMCLOUD_POSTGRES_TYPES_LEXEME_WEIGHT_A 0
#define WASMCLOUD_POSTGRES_TYPES_LEXEME_WEIGHT_B 1
#define WASMCLOUD_POSTGRES_TYPES_LEXEME_WEIGHT_C 2
#define WASMCLOUD_POSTGRES_TYPES_LEXEME_WEIGHT_D 3

typedef struct {
  bool is_some;
  uint16_t val;
} component_option_u16_t;

typedef struct {
  bool is_some;
  wasmcloud_postgres_types_lexeme_weight_t val;
} wasmcloud_postgres_types_option_lexeme_weight_t;

// Represents an arbitrary precision numeric type
typedef struct wasmcloud_postgres_types_lexeme_t {
  // Position (1->16383)
  component_option_u16_t   position;
  // Weight of the lexeme (in a relevant ts-vector)
  wasmcloud_postgres_types_option_lexeme_weight_t   weight;
  // Data
  component_string_t   data;
} wasmcloud_postgres_types_lexeme_t;

// Offsets are expressed in seconds of timezone difference in either from the
// eastern hemisphere or western hemisphere.
// 
// ex. "America/New York", which is UTC-4 can be expressed as western-hemisphere-secs(4 * 3600)
typedef struct wasmcloud_postgres_types_offset_t {
  uint8_t tag;
  union {
    int32_t     eastern_hemisphere_secs;
    int32_t     western_hemisphere_secs;
  } val;
} wasmcloud_postgres_types_offset_t;

#define WASMCLOUD_POSTGRES_TYPES_OFFSET_EASTERN_HEMISPHERE_SECS 0
#define WASMCLOUD_POSTGRES_TYPES_OFFSET_WESTERN_HEMISPHERE_SECS 1

typedef struct {
  int32_t f0;
  uint32_t f1;
  uint32_t f2;
} component_tuple3_s32_u32_u32_t;

// Dates are represented similarly to tokio-postgres implementation
// see: https://docs.rs/postgres-types/0.2.6/postgres_types/enum.Date.html#variant.Value
typedef struct wasmcloud_postgres_types_date_t {
  uint8_t tag;
  union {
    component_tuple3_s32_u32_u32_t     ymd;
  } val;
} wasmcloud_postgres_types_date_t;

#define WASMCLOUD_POSTGRES_TYPES_DATE_POSITIVE_INFINITY 0
#define WASMCLOUD_POSTGRES_TYPES_DATE_NEGATIVE_INFINITY 1
#define WASMCLOUD_POSTGRES_TYPES_DATE_YMD 2

typedef struct wasmcloud_postgres_types_interval_t {
  wasmcloud_postgres_types_date_t   start;
  bool   start_inclusive;
  wasmcloud_postgres_types_date_t   end;
  bool   end_inclusive;
} wasmcloud_postgres_types_interval_t;

typedef struct wasmcloud_postgres_types_time_t {
  uint32_t   hour;
  uint32_t   min;
  uint32_t   sec;
  uint32_t   micro;
} wasmcloud_postgres_types_time_t;

typedef struct wasmcloud_postgres_types_time_tz_t {
  component_string_t   timesonze;
  wasmcloud_postgres_types_time_t   time;
} wasmcloud_postgres_types_time_tz_t;

typedef struct wasmcloud_postgres_types_timestamp_t {
  wasmcloud_postgres_types_date_t   date;
  wasmcloud_postgres_types_time_t   time;
} wasmcloud_postgres_types_timestamp_t;

typedef struct wasmcloud_postgres_types_timestamp_tz_t {
  wasmcloud_postgres_types_timestamp_t   timestamp;
  wasmcloud_postgres_types_offset_t   offset;
} wasmcloud_postgres_types_timestamp_tz_t;

typedef struct {
  uint8_t f0;
  uint8_t f1;
  uint8_t f2;
  uint8_t f3;
  uint8_t f4;
  uint8_t f5;
} component_tuple6_u8_u8_u8_u8_u8_u8_t;

typedef struct wasmcloud_postgres_types_mac_address_eui48_t {
  component_tuple6_u8_u8_u8_u8_u8_u8_t   bytes;
} wasmcloud_postgres_types_mac_address_eui48_t;

typedef struct {
  uint8_t f0;
  uint8_t f1;
  uint8_t f2;
  uint8_t f3;
  uint8_t f4;
  uint8_t f5;
  uint8_t f6;
  uint8_t f7;
} component_tuple8_u8_u8_u8_u8_u8_u8_u8_u8_t;

typedef struct wasmcloud_postgres_types_mac_address_eui64_t {
  component_tuple8_u8_u8_u8_u8_u8_u8_u8_u8_t   bytes;
} wasmcloud_postgres_types_mac_address_eui64_t;

typedef struct {
  int64_t *ptr;
  size_t len;
} component_list_s64_t;

typedef struct {
  bool *ptr;
  size_t len;
} component_list_bool_t;

typedef struct {
  wasmcloud_postgres_types_hashable_f64_t *ptr;
  size_t len;
} component_list_hashable_f64_t;

typedef struct {
  wasmcloud_postgres_types_hashable_f32_t *ptr;
  size_t len;
} component_list_hashable_f32_t;

typedef struct {
  int32_t *ptr;
  size_t len;
} component_list_s32_t;

typedef struct {
  wasmcloud_postgres_types_numeric_t *ptr;
  size_t len;
} component_list_numeric_t;

typedef struct {
  int16_t *ptr;
  size_t len;
} component_list_s16_t;

typedef struct {
  component_list_s16_t *ptr;
  size_t len;
} component_list_list_s16_t;

typedef struct {
  uint8_t *ptr;
  size_t len;
} component_list_u8_t;

typedef struct {
  uint32_t f0;
  component_list_u8_t f1;
} component_tuple2_u32_list_u8_t;

typedef struct {
  component_tuple2_u32_list_u8_t *ptr;
  size_t len;
} component_list_tuple2_u32_list_u8_t;

typedef struct {
  bool is_some;
  uint32_t val;
} component_option_u32_t;

typedef struct {
  component_option_u32_t f0;
  component_list_u8_t f1;
} component_tuple2_option_u32_list_u8_t;

typedef struct {
  component_tuple2_option_u32_list_u8_t *ptr;
  size_t len;
} component_list_tuple2_option_u32_list_u8_t;

typedef struct {
  component_list_u8_t *ptr;
  size_t len;
} component_list_list_u8_t;

typedef struct {
  component_string_t *ptr;
  size_t len;
} component_list_string_t;

typedef struct {
  wasmcloud_postgres_types_mac_address_eui48_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_mac_address_eui48_t;

typedef struct {
  wasmcloud_postgres_types_mac_address_eui64_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_mac_address_eui64_t;

typedef struct {
  wasmcloud_postgres_types_lower_left_point_t f0;
  wasmcloud_postgres_types_upper_right_point_t f1;
} component_tuple2_lower_left_point_upper_right_point_t;

typedef struct {
  component_tuple2_lower_left_point_upper_right_point_t *ptr;
  size_t len;
} component_list_tuple2_lower_left_point_upper_right_point_t;

typedef struct {
  wasmcloud_postgres_types_center_point_t f0;
  wasmcloud_postgres_types_radius_t f1;
} component_tuple2_center_point_radius_t;

typedef struct {
  component_tuple2_center_point_radius_t *ptr;
  size_t len;
} component_list_tuple2_center_point_radius_t;

typedef struct {
  wasmcloud_postgres_types_start_point_t f0;
  wasmcloud_postgres_types_end_point_t f1;
} component_tuple2_start_point_end_point_t;

typedef struct {
  component_tuple2_start_point_end_point_t *ptr;
  size_t len;
} component_list_tuple2_start_point_end_point_t;

typedef struct {
  wasmcloud_postgres_types_point_t *ptr;
  size_t len;
} component_list_point_t;

typedef struct {
  component_list_point_t *ptr;
  size_t len;
} component_list_list_point_t;

typedef struct {
  wasmcloud_postgres_types_date_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_date_t;

typedef struct {
  wasmcloud_postgres_types_interval_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_interval_t;

typedef struct {
  wasmcloud_postgres_types_time_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_time_t;

typedef struct {
  wasmcloud_postgres_types_time_tz_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_time_tz_t;

typedef struct {
  wasmcloud_postgres_types_timestamp_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_timestamp_t;

typedef struct {
  wasmcloud_postgres_types_timestamp_tz_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_timestamp_tz_t;

typedef struct {
  uint64_t *ptr;
  size_t len;
} component_list_u64_t;

typedef struct {
  wasmcloud_postgres_types_xmin_t f0;
  wasmcloud_postgres_types_xmax_t f1;
  wasmcloud_postgres_types_xip_list_t f2;
} component_tuple3_xmin_xmax_xip_list_t;

typedef struct {
  wasmcloud_postgres_types_lexeme_t *ptr;
  size_t len;
} wasmcloud_postgres_types_list_lexeme_t;

typedef struct {
  bool is_some;
  component_string_t val;
} component_option_string_t;

typedef struct {
  component_string_t f0;
  component_option_string_t f1;
} component_tuple2_string_option_string_t;

typedef struct {
  component_tuple2_string_option_string_t *ptr;
  size_t len;
} component_list_tuple2_string_option_string_t;

// Postgres data values, usable as parameters or via queries
// see: https://www.postgresql.org/docs/current/datatype.html
// 
// This datatype is primarily intended to be used with the `raw` encoding scheme.
// 
// NOTE: all numeric values are little-endian unless otherwise specified
typedef struct wasmcloud_postgres_types_pg_value_t {
  uint8_t tag;
  union {
    int64_t     big_int;
    int64_t     int8;
    component_list_s64_t     int8_array;
    int64_t     big_serial;
    int64_t     serial8;
    bool     bool_;
    bool     boolean;
    component_list_bool_t     bool_array;
    wasmcloud_postgres_types_hashable_f64_t     double_;
    wasmcloud_postgres_types_hashable_f64_t     float8;
    component_list_hashable_f64_t     float8_array;
    wasmcloud_postgres_types_hashable_f32_t     real;
    wasmcloud_postgres_types_hashable_f32_t     float4;
    component_list_hashable_f32_t     float4_array;
    int32_t     integer;
    int32_t     int_;
    int32_t     int4;
    component_list_s32_t     int4_array;
    wasmcloud_postgres_types_numeric_t     numeric;
    wasmcloud_postgres_types_numeric_t     decimal;
    component_list_numeric_t     numeric_array;
    uint32_t     serial;
    uint32_t     serial4;
    int16_t     small_int;
    int16_t     int2;
    component_list_s16_t     int2_array;
    component_list_s16_t     int2_vector;
    component_list_list_s16_t     int2_vector_array;
    int16_t     small_serial;
    int16_t     serial2;
    component_tuple2_u32_list_u8_t     bit;
    component_list_tuple2_u32_list_u8_t     bit_array;
    component_tuple2_option_u32_list_u8_t     bit_varying;
    component_tuple2_option_u32_list_u8_t     varbit;
    component_list_tuple2_option_u32_list_u8_t     varbit_array;
    component_list_u8_t     bytea;
    component_list_list_u8_t     bytea_array;
    component_tuple2_u32_list_u8_t     char_;
    component_list_tuple2_u32_list_u8_t     char_array;
    component_tuple2_option_u32_list_u8_t     varchar;
    component_list_tuple2_option_u32_list_u8_t     varchar_array;
    component_string_t     cidr;
    component_list_string_t     cidr_array;
    component_string_t     inet;
    component_list_string_t     inet_array;
    wasmcloud_postgres_types_mac_address_eui48_t     macaddr;
    wasmcloud_postgres_types_list_mac_address_eui48_t     macaddr_array;
    wasmcloud_postgres_types_mac_address_eui64_t     macaddr8;
    wasmcloud_postgres_types_list_mac_address_eui64_t     macaddr8_array;
    component_tuple2_lower_left_point_upper_right_point_t     box;
    component_list_tuple2_lower_left_point_upper_right_point_t     box_array;
    component_tuple2_center_point_radius_t     circle;
    component_list_tuple2_center_point_radius_t     circle_array;
    component_tuple2_start_point_end_point_t     line;
    component_list_tuple2_start_point_end_point_t     line_array;
    component_tuple2_start_point_end_point_t     lseg;
    component_list_tuple2_start_point_end_point_t     lseg_array;
    component_list_point_t     path;
    component_list_list_point_t     path_array;
    wasmcloud_postgres_types_point_t     point;
    component_list_point_t     point_array;
    component_list_point_t     polygon;
    component_list_list_point_t     polygon_array;
    wasmcloud_postgres_types_date_t     date;
    wasmcloud_postgres_types_list_date_t     date_array;
    wasmcloud_postgres_types_interval_t     interval;
    wasmcloud_postgres_types_list_interval_t     interval_array;
    wasmcloud_postgres_types_time_t     time;
    wasmcloud_postgres_types_list_time_t     time_array;
    wasmcloud_postgres_types_time_tz_t     time_tz;
    wasmcloud_postgres_types_list_time_tz_t     time_tz_array;
    wasmcloud_postgres_types_timestamp_t     timestamp;
    wasmcloud_postgres_types_list_timestamp_t     timestamp_array;
    wasmcloud_postgres_types_timestamp_tz_t     timestamp_tz;
    wasmcloud_postgres_types_list_timestamp_tz_t     timestamp_tz_array;
    component_string_t     json;
    component_list_string_t     json_array;
    component_string_t     jsonb;
    component_list_string_t     jsonb_array;
    wasmcloud_postgres_types_numeric_t     money;
    component_list_numeric_t     money_array;
    uint64_t     pg_lsn;
    component_list_u64_t     pg_lsn_array;
    component_tuple3_xmin_xmax_xip_list_t     pg_snapshot;
    int64_t     txid_snapshot;
    component_string_t     name;
    component_list_string_t     name_array;
    component_string_t     text;
    component_list_string_t     text_array;
    component_string_t     xml;
    component_list_string_t     xml_array;
    component_string_t     ts_query;
    wasmcloud_postgres_types_list_lexeme_t     ts_vector;
    component_string_t     uuid;
    component_list_string_t     uuid_array;
    component_list_tuple2_string_option_string_t     hstore;
  } val;
} wasmcloud_postgres_types_pg_value_t;

#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_NULL 0
// Numeric
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BIG_INT 1
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT8 2
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT8_ARRAY 3
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BIG_SERIAL 4
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_SERIAL8 5
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BOOL 6
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BOOLEAN 7
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BOOL_ARRAY 8
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_DOUBLE 9
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_FLOAT8 10
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_FLOAT8_ARRAY 11
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_REAL 12
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_FLOAT4 13
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_FLOAT4_ARRAY 14
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INTEGER 15
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT 16
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT4 17
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT4_ARRAY 18
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_NUMERIC 19
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_DECIMAL 20
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_NUMERIC_ARRAY 21
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_SERIAL 22
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_SERIAL4 23
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_SMALL_INT 24
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT2 25
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT2_ARRAY 26
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT2_VECTOR 27
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INT2_VECTOR_ARRAY 28
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_SMALL_SERIAL 29
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_SERIAL2 30
// note: matches tokio-postgres
// Bytes
// 
// For bit & bit-varying, see the encoding scheme used by bit-vec:
// https://contain-rs.github.io/bit-vec/bit_vec/struct.BitVec.html#method.to_bytes
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BIT 31
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BIT_ARRAY 32
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BIT_VARYING 33
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_VARBIT 34
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_VARBIT_ARRAY 35
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BYTEA 36
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BYTEA_ARRAY 37
// Characters
// TODO: specify text encoding, to negotiate possible component/DB mismatch?
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_CHAR 38
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_CHAR_ARRAY 39
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_VARCHAR 40
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_VARCHAR_ARRAY 41
// Networking
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_CIDR 42
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_CIDR_ARRAY 43
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INET 44
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INET_ARRAY 45
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_MACADDR 46
// EUI-48
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_MACADDR_ARRAY 47
// EUI-48
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_MACADDR8 48
// EUI-64 (deprecated)
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_MACADDR8_ARRAY 49
// EUI-64 (deprecated)
// Geo
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BOX 50
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_BOX_ARRAY 51
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_CIRCLE 52
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_CIRCLE_ARRAY 53
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_LINE 54
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_LINE_ARRAY 55
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_LSEG 56
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_LSEG_ARRAY 57
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_PATH 58
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_PATH_ARRAY 59
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_POINT 60
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_POINT_ARRAY 61
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_POLYGON 62
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_POLYGON_ARRAY 63
// Date-time
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_DATE 64
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_DATE_ARRAY 65
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INTERVAL 66
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_INTERVAL_ARRAY 67
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TIME 68
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TIME_ARRAY 69
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TIME_TZ 70
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TIME_TZ_ARRAY 71
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TIMESTAMP 72
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TIMESTAMP_ARRAY 73
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TIMESTAMP_TZ 74
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TIMESTAMP_TZ_ARRAY 75
// JSON
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_JSON 76
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_JSON_ARRAY 77
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_JSONB 78
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_JSONB_ARRAY 79
// Money (use is discouraged)
// 
// fractional precision is determined by the database's `lc_monetary` setting.
// 
// NOTE: if you are storing currency amounts, consider
// using integer (whole number) counts of smallest indivisible pieces of currency
// (ex. cent amounts to represent United States Dollars; 100 cents = 1 USD)
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_MONEY 80
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_MONEY_ARRAY 81
// Postgres-internal
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_PG_LSN 82
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_PG_LSN_ARRAY 83
// see: https://www.postgresql.org/docs/current/functions-info.html#FUNCTIONS-PG-SNAPSHOT-PARTS
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_PG_SNAPSHOT 84
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TXID_SNAPSHOT 85
// Text
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_NAME 86
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_NAME_ARRAY 87
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TEXT 88
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TEXT_ARRAY 89
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_XML 90
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_XML_ARRAY 91
// Full Text Search
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TS_QUERY 92
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_TS_VECTOR 93
// UUIDs
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_UUID 94
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_UUID_ARRAY 95
// Containers
#define WASMCLOUD_POSTGRES_TYPES_PG_VALUE_HSTORE 96

typedef struct wasmcloud_postgres_types_result_row_entry_t {
  // Name of the result column
  component_string_t   column_name;
  // Value of the result column
  wasmcloud_postgres_types_pg_value_t   value;
} wasmcloud_postgres_types_result_row_entry_t;

typedef struct wasmcloud_postgres_types_result_row_t {
  wasmcloud_postgres_types_result_row_entry_t   *ptr;
  size_t len;
} wasmcloud_postgres_types_result_row_t;

typedef wasmcloud_postgres_types_pg_value_t wasmcloud_postgres_query_pg_value_t;

typedef wasmcloud_postgres_types_result_row_t wasmcloud_postgres_query_result_row_t;

typedef wasmcloud_postgres_types_query_error_t wasmcloud_postgres_query_query_error_t;

typedef struct {
  wasmcloud_postgres_query_pg_value_t *ptr;
  size_t len;
} wasmcloud_postgres_query_list_pg_value_t;

typedef struct {
  wasmcloud_postgres_query_result_row_t *ptr;
  size_t len;
} wasmcloud_postgres_query_list_result_row_t;

typedef struct {
  bool is_err;
  union {
    wasmcloud_postgres_query_list_result_row_t ok;
    wasmcloud_postgres_query_query_error_t err;
  } val;
} wasmcloud_postgres_query_result_list_result_row_query_error_t;

typedef struct {
  bool is_err;
  union {
    wasmcloud_postgres_query_query_error_t err;
  } val;
} wasmcloud_postgres_query_result_void_query_error_t;

// Imported Functions from `wasmcloud:postgres/query@0.1.1-draft`
// Query a Postgres database, leaving connection/session management
// to the callee/implementer of this interface (normally a provider configured with connection credentials)
// 
// Queries *must* be parameterized, with named arguments in the form of `$<integer>`, for example:
// 
// ```
// SELECT email,username FROM users WHERE uuid=$1;
// ```
extern void wasmcloud_postgres_query_query(component_string_t *query, wasmcloud_postgres_query_list_pg_value_t *params, wasmcloud_postgres_query_result_list_result_row_query_error_t *ret);
// Perform a batch query (which could contain multiple statements) against a Postgres database,
// leaving connection/session management to the callee/implementer of this interface
// (normally a provider configured with connection credentials)
// 
// No user-provided or untrusted data should be used with this query -- parameters are not allowed
// 
// This query *can* be used to execute multi-statement queries (common in migrations).
extern void wasmcloud_postgres_query_query_batch(component_string_t *query, wasmcloud_postgres_query_result_void_query_error_t *ret);

// Exported Functions from `wasmcloud:examples/invoke`
void exports_wasmcloud_examples_invoke_call(component_string_t *ret);

// Helper Functions

void wasmcloud_postgres_types_query_error_free(wasmcloud_postgres_types_query_error_t *ptr);

void wasmcloud_postgres_types_statement_prepare_error_free(wasmcloud_postgres_types_statement_prepare_error_t *ptr);

void wasmcloud_postgres_types_prepared_statement_exec_error_free(wasmcloud_postgres_types_prepared_statement_exec_error_t *ptr);

void wasmcloud_postgres_types_ipv4_addr_free(wasmcloud_postgres_types_ipv4_addr_t *ptr);

void wasmcloud_postgres_types_ipv6_addr_free(wasmcloud_postgres_types_ipv6_addr_t *ptr);

void wasmcloud_postgres_types_subnet_free(wasmcloud_postgres_types_subnet_t *ptr);

void wasmcloud_postgres_types_xip_list_free(wasmcloud_postgres_types_xip_list_t *ptr);

void wasmcloud_postgres_types_column_name_free(wasmcloud_postgres_types_column_name_t *ptr);

void wasmcloud_postgres_types_numeric_free(wasmcloud_postgres_types_numeric_t *ptr);

void component_option_u16_free(component_option_u16_t *ptr);

void wasmcloud_postgres_types_option_lexeme_weight_free(wasmcloud_postgres_types_option_lexeme_weight_t *ptr);

void wasmcloud_postgres_types_lexeme_free(wasmcloud_postgres_types_lexeme_t *ptr);

void wasmcloud_postgres_types_offset_free(wasmcloud_postgres_types_offset_t *ptr);

void wasmcloud_postgres_types_date_free(wasmcloud_postgres_types_date_t *ptr);

void wasmcloud_postgres_types_interval_free(wasmcloud_postgres_types_interval_t *ptr);

void wasmcloud_postgres_types_time_tz_free(wasmcloud_postgres_types_time_tz_t *ptr);

void wasmcloud_postgres_types_timestamp_free(wasmcloud_postgres_types_timestamp_t *ptr);

void wasmcloud_postgres_types_timestamp_tz_free(wasmcloud_postgres_types_timestamp_tz_t *ptr);

void component_list_s64_free(component_list_s64_t *ptr);

void component_list_bool_free(component_list_bool_t *ptr);

void component_list_hashable_f64_free(component_list_hashable_f64_t *ptr);

void component_list_hashable_f32_free(component_list_hashable_f32_t *ptr);

void component_list_s32_free(component_list_s32_t *ptr);

void component_list_numeric_free(component_list_numeric_t *ptr);

void component_list_s16_free(component_list_s16_t *ptr);

void component_list_list_s16_free(component_list_list_s16_t *ptr);

void component_list_u8_free(component_list_u8_t *ptr);

void component_tuple2_u32_list_u8_free(component_tuple2_u32_list_u8_t *ptr);

void component_list_tuple2_u32_list_u8_free(component_list_tuple2_u32_list_u8_t *ptr);

void component_option_u32_free(component_option_u32_t *ptr);

void component_tuple2_option_u32_list_u8_free(component_tuple2_option_u32_list_u8_t *ptr);

void component_list_tuple2_option_u32_list_u8_free(component_list_tuple2_option_u32_list_u8_t *ptr);

void component_list_list_u8_free(component_list_list_u8_t *ptr);

void component_list_string_free(component_list_string_t *ptr);

void wasmcloud_postgres_types_list_mac_address_eui48_free(wasmcloud_postgres_types_list_mac_address_eui48_t *ptr);

void wasmcloud_postgres_types_list_mac_address_eui64_free(wasmcloud_postgres_types_list_mac_address_eui64_t *ptr);

void component_list_tuple2_lower_left_point_upper_right_point_free(component_list_tuple2_lower_left_point_upper_right_point_t *ptr);

void component_list_tuple2_center_point_radius_free(component_list_tuple2_center_point_radius_t *ptr);

void component_list_tuple2_start_point_end_point_free(component_list_tuple2_start_point_end_point_t *ptr);

void component_list_point_free(component_list_point_t *ptr);

void component_list_list_point_free(component_list_list_point_t *ptr);

void wasmcloud_postgres_types_list_date_free(wasmcloud_postgres_types_list_date_t *ptr);

void wasmcloud_postgres_types_list_interval_free(wasmcloud_postgres_types_list_interval_t *ptr);

void wasmcloud_postgres_types_list_time_free(wasmcloud_postgres_types_list_time_t *ptr);

void wasmcloud_postgres_types_list_time_tz_free(wasmcloud_postgres_types_list_time_tz_t *ptr);

void wasmcloud_postgres_types_list_timestamp_free(wasmcloud_postgres_types_list_timestamp_t *ptr);

void wasmcloud_postgres_types_list_timestamp_tz_free(wasmcloud_postgres_types_list_timestamp_tz_t *ptr);

void component_list_u64_free(component_list_u64_t *ptr);

void component_tuple3_xmin_xmax_xip_list_free(component_tuple3_xmin_xmax_xip_list_t *ptr);

void wasmcloud_postgres_types_list_lexeme_free(wasmcloud_postgres_types_list_lexeme_t *ptr);

void component_option_string_free(component_option_string_t *ptr);

void component_tuple2_string_option_string_free(component_tuple2_string_option_string_t *ptr);

void component_list_tuple2_string_option_string_free(component_list_tuple2_string_option_string_t *ptr);

void wasmcloud_postgres_types_pg_value_free(wasmcloud_postgres_types_pg_value_t *ptr);

void wasmcloud_postgres_types_result_row_entry_free(wasmcloud_postgres_types_result_row_entry_t *ptr);

void wasmcloud_postgres_types_result_row_free(wasmcloud_postgres_types_result_row_t *ptr);

void wasmcloud_postgres_query_pg_value_free(wasmcloud_postgres_query_pg_value_t *ptr);

void wasmcloud_postgres_query_result_row_free(wasmcloud_postgres_query_result_row_t *ptr);

void wasmcloud_postgres_query_query_error_free(wasmcloud_postgres_query_query_error_t *ptr);

void wasmcloud_postgres_query_list_pg_value_free(wasmcloud_postgres_query_list_pg_value_t *ptr);

void wasmcloud_postgres_query_list_result_row_free(wasmcloud_postgres_query_list_result_row_t *ptr);

void wasmcloud_postgres_query_result_list_result_row_query_error_free(wasmcloud_postgres_query_result_list_result_row_query_error_t *ptr);

void wasmcloud_postgres_query_result_void_query_error_free(wasmcloud_postgres_query_result_void_query_error_t *ptr);

// Transfers ownership of `s` into the string `ret`
void component_string_set(component_string_t *ret, const char*s);

// Creates a copy of the input nul-terminate string `s` and
// stores it into the component model string `ret`.
void component_string_dup(component_string_t *ret, const char*s);

// Deallocates the string pointed to by `ret`, deallocating
// the memory behind the string.
void component_string_free(component_string_t *ret);

#ifdef __cplusplus
}
#endif
#endif
