apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: keyvalue-counter-auth
  annotations:
    description: 'HTTP counter application with authentication, using the wasmcloud:secrets interface'
    wasmcloud.dev/authors: wasmCloud team
    wasmcloud.dev/source-url: https://github.com/wasmCloud/wasmCloud/blob/main/examples/security/secrets/component-keyvalue-counter-auth/wadm.yaml
    wasmcloud.dev/homepage: https://github.com/wasmCloud/wasmCloud/tree/main/examples/security/secrets/component-keyvalue-counter-auth
    wasmcloud.dev/categories: |
      http,http-server,keyvalue,secrets,rust,example
spec:
  # The policy block allows reuse of secrets backend configurations across components and providers
  policies:
    - name: nats-kv
      type: policy.secret.wasmcloud.dev/v1alpha1
      properties:
        backend: nats-kv
  components:
    - name: counter
      type: component
      properties:
        image: file://./component-keyvalue-counter-auth/build/component_keyvalue_counter_auth_s.wasm
        id: auth-counter
        # Provide the api_password secret to this component, fetching from nats-kv
        secrets:
          - name: api_password
            properties:
              policy: nats-kv
              key: api_password
      traits:
        # Govern the spread/scheduling of the component
        - type: spreadscaler
          properties:
            instances: 100
        # Link the component to Redis on the default Redis port
        #
        # Establish a unidirectional link to the `kvredis` (the keyvalue capability provider),
        # so the `counter` component can make use of keyvalue functionality provided by the Redis
        # (i.e. using a keyvalue cache)
        - type: link
          properties:
            target:
              name: kvredis
              config:
                - name: redis-url
                  properties:
                    url: 0.0.0.0:6379
              # Provide the redis_password secret to the target of the link, kvredis. This is used
              # to connect to Redis with the password at runtime.
              secrets:
                - name: redis_password
                  properties:
                    policy: nats-kv
                    key: redis_password
            namespace: wasi
            package: keyvalue
            interfaces: [atomics, store]

    # Add a capability provider that enables Redis access
    - name: kvredis
      type: capability
      properties:
        image: file://./provider-keyvalue-redis-auth/build/wasmcloud-example-auth-kvredis.par.gz
        id: auth-kvredis
        # Provide the default_redis_password secret to the provider. The Redis provider can use this
        # secret as needed to authenticate with Redis.
        secrets:
          - name: default_redis_password
            properties:
              policy: nats-kv
              key: default_redis_password

    # Add a capability provider that enables HTTP access
    - name: httpserver
      type: capability
      properties:
        image: ghcr.io/wasmcloud/http-server:0.25.0
        id: auth-http-server
      traits:
        # Link the httpserver to the component, and configure the HTTP server
        # to listen on port 8000 for incoming requests
        #
        # Since the HTTP server calls the `counter` component, we establish
        # a unidirectional link from this `httpserver` provider (the "source")
        # to the `counter` component (the "target"), so the server can invoke
        # the component to handle a request.
        - type: link
          properties:
            target:
              name: counter
            namespace: wasi
            package: http
            interfaces: [incoming-handler]
            source:
              config:
                - name: default-http
                  properties:
                    address: 0.0.0.0:8000
