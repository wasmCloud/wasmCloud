apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  name: rust-http-password-checker
  annotations:
    description: |
      Password strength checker which can also access secrets, written in Rust
    wasmcloud.dev/authors: wasmCloud team
    wasmcloud.dev/source-url: https://github.com/wasmCloud/wasmCloud/blob/main/examples/rust/components/http-password-checker/wadm.yaml
    wasmcloud.dev/readme-md-url: https://github.com/wasmCloud/wasmCloud/blob/main/examples/rust/components/http-password-checker/README.md
    wasmcloud.dev/homepage: https://github.com/wasmCloud/wasmCloud/tree/main/examples/rust/components/http-password-checker
    wasmcloud.dev/categories: |
      http,http-server,rust,http-password-checker,example,security,secrets
spec:
  components:
    - name: http-component
      type: component
      properties:
        image: file://./build/http_password_checker_s.wasm
        # To use the a precompiled version of this component, use the line below instead:
        # image: ghcr.io/wasmcloud/components/http-password-checker-rust:0.1.0
      traits:
        # Govern the spread/scheduling of the component
        - type: spreadscaler
          properties:
            instances: 1

    # Add a capability provider that enables HTTP access
    - name: httpserver
      type: capability
      properties:
        image: ghcr.io/wasmcloud/http-server:0.23.2
        ## To configure OTEL integration for this provider specifically, uncomment the lines below
        # config:
        #   - name: otel
        #     properties:
        #       otel_exporter_otlp_endpoint: "http://all-in-one:4318"
        #       otel_exporter_otlp_traces_endpoint: "http://traces-backend/v1/traces"
        #       otel_exporter_otlp_metrics_endpoint: "http://metrics-backend/v1/metrics"
        #       otel_exporter_otlp_logs_endpoint: "http://logs-backend/v1/logs"
      traits:
        # Establish a unidirectional link from this http server provider (the "source")
        # to the `http-component` component (the "target") so the component can handle incoming HTTP requests,
        #
        # The source (this provider) is configured such that the HTTP server listens on 127.0.0.1:8080
        - type: link
          properties:
            target: http-component
            namespace: wasi
            package: http
            interfaces: [incoming-handler]
            source_config:
              - name: default-http
                properties:
                  address: 127.0.0.1:8080
