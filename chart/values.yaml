replicaCount: 1

wasmcloud:
  # Config options for the wasmCloud Host. See
  # https://wasmcloud.dev/reference/host-runtime/host_configure/ for full details
  config:
    natsHost: 127.0.0.1
    natsPort: 4222
    natsJwt: ""
    natsSeed: ""
    latticePrefix: ""
    hostSeed: ""
    clusterSeed: ""
    clusterIssuers: ""
    providerShutdownDelay: ""
    ociAllowedInsecure: ""
    ociAllowLatest: false
    jetstreamDomain: ""
    configServiceEnabled: false
    allowFileLoad: false
    logging:
      structuredLoggingEnabled: false
      logLevel: ""
    # A map of key value pairs to use as wasmCloud Host labels. These map to environment variable
    # names, so the `.` character is not allowed
    hostLabels:
      kubernetes: "true"
    # These are advanced settings:
    control:
      natsHost: ""
      natsPort: ""
      natsJwt: ""
      natsSeed: ""
      topicPrefix: ""
      tls: false
    rpc:
      natsHost: ""
      natsPort: ""
      natsJwt: ""
      natsSeed: ""
      timeoutMs: ""
      tls: false
    providerRpc:
      natsHost: ""
      natsPort: ""
      natsJwt: ""
      natsSeed: ""
      tls: false
    otel:
      exporter: ""
      endpoint: ""
    # Sets the username and password for use with a private registry
    registry:
      url: ""
      username: ""
      password: ""

  # Enables support for the Kubernetes Applier provider. Essentially, this generates a role and role
  # binding for the pod service account that allows it to get, create, update, delete, and patch
  # service resources if you start the kubernetes applier on one of these hosts. Enabling this
  # option enables service account creation
  enableApplierSupport: false
  # Extra labels to attach to the pod template for each host. Meant for use with things like the
  # Service Applier actor, which requires specific labels in order to route to those pods
  customLabels: {}
  image:
    repository: wasmcloud/wasmcloud
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""
  resources: {}

nats:
  # Enables the nats container (enabled by default). This can be disabled if you'd like to connect
  # to another in-cluster NATS cluster
  enabled: true
  # The jetstream domain to use for distributed cache data. You'll likely need this if running in
  # production. This is different than the domain used for the host
  jetstreamDomain: ""
  leafnode:
    # Sets the nats container to operate in leafnode mode
    enabled: false
    # The NATS cluster to connect to. Defaults to NGS
    clusterURL: "nats-leaf://connect.ngs.global"
    # Credentials to use
    credentials: ""

  image:
    repository: nats
    pullPolicy: IfNotPresent
    # NOTE: The alpine image is required if you are doing leafnode configuration. Otherwise the base
    # nats image is missing the root certificates needed for validation
    tag: "2.10.7-alpine"
  resources: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - "ALL"
  seccompProfile:
    type: "RuntimeDefault"

service:
  type: ClusterIP
  natsPort: 8080

nodeSelector: {}

tolerations: []

affinity: {}

# Whether or not to expose the host and its NATS server as a service. This defaults to true for ease
# of "kick the tires" use. For real deployments, this should likely be turned off
useService: true
